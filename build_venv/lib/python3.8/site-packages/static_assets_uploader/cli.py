""" The entry point to the static asset uploader"""
import json
import sys
from pathlib import Path
import click

from .exceptions import InvalidStaticAssetConfigException
from .static_asset_config import StaticAssetConfig
from .static_asset_promoter import StaticAssetPromoter
from .static_asset_uploader import StaticAssetUploader


@click.group()
def cli():
    """ Entry point"""


@cli.command('upload-assets')
@click.option('--path', type=Path, required=True,
              help='Root path of the workspace from where the assets are validated and uploaded')
@click.option('--service-version', required=True,
              help='version of the service that has the static asset artifacts')
@click.option('--service-env', default=['dev'], multiple=True,
              help="Environments where the service should be validated across")
@click.option('--api-env', default='infra', type=click.Choice(['dev', 'infra', 'local']),
              help="Environment for infra-api")
@click.option('--secret-group-env', default='dev', type=click.Choice(['dev', 'infra', 'local']),
              help="The secret group to fetch the secret from")
@click.option('--app-metadata', multiple=True, type=click.Tuple([str, str]),
              help="Application metadata key/value pairs")
@click.option('--cluster-name', required=False,
              help='cluster name coming in from pipeline library if present')
def upload_assets(
        path: Path,
        service_version: str,
        service_env: str,
        api_env: str,
        secret_group_env: str,
        app_metadata,
        cluster_name: str
) -> None:
    """ Command to invoke the static asset uploader"""
    service_envs = list(service_env)
    app_metadata = dict(app_metadata)
    uploader = StaticAssetUploader(path, service_version, service_envs, api_env, secret_group_env, app_metadata,
                                   cluster_name)
    uploader.upload_assets()


@cli.command('promote-assets')
@click.option('--path', type=Path, required=True,
              help='Root path of the workspace from where the assets are validated and uploaded')
@click.option('--service-version', required=True,
              help='version of the service that has the static asset artifacts')
@click.option('--service-env', default='dev', required=True,
              help="Environment where the service's static assets should be promoted")
@click.option('--api-env', default='infra', type=click.Choice(['dev', 'infra', 'local']),
              help="Environment for infra-api")
@click.option('--secret-group-env', default='dev', type=click.Choice(['dev', 'infra', 'local']),
              help="The secret group to fetch the secret from")
def promote_assets(
        path: Path,
        service_version: str,
        service_env: str,
        api_env: str,
        secret_group_env: str
) -> None:
    """ Command to invoke the static asset promoter """
    promoter = StaticAssetPromoter(path, service_version, service_env, api_env, secret_group_env)
    promoter.promote_assets()


@cli.command('parse-config')
@click.option('--path', type=Path, required=True,
              help='Root path of the workspace from where the assets are validated and uploaded')
@click.option('--cluster-name', required=False,
              help='cluster name coming in from pipeline library if present')
def parse_config(path: Path, cluster_name: str) -> None:
    """ The parse-config command validates the static assets configuration given by the --path option. """
    try:
        static_assets_config = StaticAssetConfig(path, cluster_name)
        service_name = static_assets_config.service_name
        config = static_assets_config.get_config()
        click.echo(f'{click.style(f" Parsing passed for service {service_name}", fg="green")}', color=True)
        click.echo(f'{click.style(f" Config: {json.dumps(config, indent=2)}", fg="green")}', color=True)
    except InvalidStaticAssetConfigException:
        sys.exit(3)
