"""Helper for interactions with infra-api"""

from base64 import urlsafe_b64encode

from typing import Any, Dict
import click
import requests
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter
from secretstash import SecretStash


CLIENT_ID = '0oa1vcvf8lWEQk1dH5d7'


class InfraApiClient:
    """ authenticates and makes calls to infra-api"""

    def __init__(self, *, api_env: str, secret_group_env='dev') -> None:
        """
        Sets up the target environment and auth info
        :param api_env: The environment to hit infra-api in
        :param secret_group_env: The env name of the stash group to pull the secrets from
        """
        self.api_env = api_env
        self.secret_env = api_env
        self.secret_group_env = secret_group_env
        retry_strategy = Retry(
            total=4,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["GET", "POST"],
            raise_on_redirect=False,
            raise_on_status=False,
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.requests_session = requests.session()
        self.requests_session.mount('https://', adapter)
        self.urls = {
            'dev': 'https://infra-api.us-east-1.inindca.com',
            'infra': 'https://infra-api.us-east-1.ininica.com',
            'local': 'http://127.0.0.1:4002'
        }
        self.authenticate()

    def authenticate(self) -> None:
        """Determines and uses an auth method to attach a JWT to the requests session default headers"""
        click.echo(click.style(f'Authenticating with secret stash for {self.secret_env}', fg='yellow'), color=True)
        try:
            # The gc_client_secrets_dev/infra already has the auth for jenkins to use infra-api
            secret_stash = SecretStash(
                environment=self.secret_group_env,
                region='us-east-1',
                group='jenkins',
                secret_name='infra_api_okta_client_secret'
            )
            client_secret = secret_stash.get()
            response = self.requests_session.post(
                url='https://genesys-cloud.okta.com/oauth2/ausp0jyr69BmVXLGG5d6/v1/token',
                data={
                    'grant_type': 'client_credentials',
                    'scope': 'api_key'
                },
                headers={
                    'Authorization': f'Basic {urlsafe_b64encode(f"{CLIENT_ID}:{client_secret}".encode()).decode()}',
                    'Accept': 'application/json',
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                timeout=5
            )
            response.raise_for_status()
            self.requests_session.headers.update(
                {'Authorization': f'Bearer {response.json()["access_token"]}', 'Content-Type': 'application/json'}
            )
        except Exception as exception:  # pylint: disable=broad-except
            click.echo(click.style(f'Secret Stash error: {exception}', fg='red'), color=True)
            raise exception

    def get(self, *args, **kwargs) -> Dict[str, Any]:
        """
        Makes a GET call to requests using the current infra-api session
        :param args: The args for the requests call
        :param kwargs: The keyword args for the requests call
        :return: The JSON response from the call
        """
        if 'path' in kwargs:
            args = [f'{self.urls[self.api_env]}{kwargs["path"]}']
            del kwargs['path']
        self.requests_session.headers.update({'GC-Alt-Alias': 'true'})
        response = self.requests_session.get(*args, **kwargs)
        if response.status_code >= 400:
            click.echo(click.style(
                f'GET request to {response.url} failed. '
                f'Correlation ID: {response.headers.get("ININ-Correlation-Id")}', fg='red'), color=True)
            response.reason = response.text
        response.raise_for_status()
        return response.json()

    def post(self, *args, **kwargs) -> Dict[str, Any]:
        """
        Makes a POST call to requests using the current infra-api session
        :param args: The args for the requests call
        :param kwargs: The keyword args for the requests call
        :return: The JSON response from the call
        """
        if 'path' in kwargs:
            args = [f'{self.urls[self.api_env]}{kwargs["path"]}']
            del kwargs['path']
        self.requests_session.headers.update({'GC-Alt-Alias': 'true'})
        response = self.requests_session.post(*args, **kwargs)
        if response.status_code >= 400:
            click.echo(click.style(
                f'POST request to {response.url} {response.status_code} failed. '
                f'Correlation ID: {response.headers.get("ININ-Correlation-Id")}', fg='red'), color=True)
            response.reason = response.text
            if response.status_code != 422:
                response.raise_for_status()
            return response.json()
        else:
            response.raise_for_status()
            return response
