"""Externally exposed exceptions raised by the client"""

from requests import Response


class HyperionException(Exception):
    """Base exception for all other exceptions raised by this client"""


class UnknownItemTypeError(HyperionException):
    """Raised when attempting to create an interface via string on an unknown item type"""


class CacheDisabledError(HyperionException):
    """Raised when attempting to talk to the file cache first but the file cache is disabled"""


class ExpandedNameError(HyperionException):
    """Raised when attempting to iterate over name-only items but requesting that they be expanded"""


class ConnectionManagerError(HyperionException):
    """Common exception for any errors related to a ConnectionManager"""


class UnsupportedMethodError(ConnectionManagerError):
    """Raised when the current connection manager does not support the requested HTTP method"""


class InfraApiLoginError(ConnectionManagerError):
    """Raised when an error is encountered logging a client in to infra-api"""


class RegionNotFoundError(ConnectionManagerError):
    """Raise on a direct connection that was not provided a region, where the region could not be auto-discovered"""


class CustomHTTPError(Exception):
    """Common exception for HTTPError extensions, these exist to avoid tripping the circuit breaker on client errors"""

    def __init__(self, response: Response):
        """
        Stores the requests response similar to HTTPError
        :param response:
        """
        self.response = response
        super().__init__(
            f'Status code: {response.status_code}\n'
            f'Attempted {response.request.method} request to endpoint {response.request.url}\n'
            f'Reason: {response.text}'
        )


class RequestClientError(CustomHTTPError):
    """Raised when 4xx level errors occur"""

    def __init__(self, response: Response):
        """
        Stores the requests response similar to HTTPError
        :param response:
        """
        self.response = response
        super().__init__(response=response)


class RequestServerError(CustomHTTPError):
    """Raised when 5xx level errors occur"""

    def __init__(self, response: Response):
        """
        Stores the requests response similar to HTTPError
        :param response:
        """
        self.response = response
        super().__init__(response=response)


class ItemWriteError(HyperionException):
    """Common exception for any issues writing an item to the service"""


class ExpandedWriteError(ItemWriteError):
    """Raised when an attempt is made to write an expanded record"""


class FileCacheWriteError(ItemWriteError):
    """Raised when an attempt is made to write a record that was retrieved from the file cache"""
