"""Main client to talk to hyperion"""


from hyperion.connections import ConnectionManager, DirectConnection
from hyperion.exceptions import UnknownItemTypeError, CacheDisabledError
from hyperion.items.base_item import Interface
from hyperion.items.account import AccountInterface
from hyperion.items.biome import BiomeInterface
from hyperion.items.ecosystem import EcosystemInterface
from hyperion.items.environment import EnvironmentInterface
from hyperion.items.family import FamilyInterface
from hyperion.items.habitat import HabitatInterface
from hyperion.items.ou import OuInterface
from hyperion.items.region import RegionInterface
from hyperion.items.sshkey import SshKeyInterface
from hyperion.items.sumo import SumoInterface


class Hyperion:
    """Base functionality for the hyperion API"""

    __slots__ = ('connection', 'lock_timestamp', 'cache_file_fallback', 'cache_first')

    def __init__(
            self,
            connection: ConnectionManager = None,
            lock_timestamp: int = None,
            cache_file_fallback: bool = True,
            cache_first: bool = False
    ) -> None:
        """
        Validates the setup and logs into infra-api with the provided client if necessary
        :param connection: The connection instance to use when talking to hyperion
            Defaults to a DirectConnection with all default args, including AWS region auto-discovery
        :param lock_timestamp: The timestamp to use as the max timestamp for any retrieved items
        :param cache_file_fallback: If True, falls back to cache files on a HTTPError or CircuitBreakerError
            encountered during a GET request
        :param cache_first: If True, hits the cache first, falling back to the hyperion service if an item is not found
        """
        if not connection:  # Do the defaulting here so it doesn't try to set up on import
            connection = DirectConnection()
        self.connection = connection
        self.lock_timestamp = lock_timestamp
        if (not cache_file_fallback) and cache_first:
            raise CacheDisabledError('cache_file_fallback must be enabled if you wish to hit the file cache first')
        self.cache_file_fallback = cache_file_fallback
        self.cache_first = cache_first

    def interface(self, item_type: str) -> Interface:
        """
        Gets an interface by the item type string
        :param item_type: The item type to fetch the interface for
        :return: The interface
        """
        if item_type == 'account':
            interface = self.account()
        elif item_type == 'biome':
            interface = self.biome()
        elif item_type == 'ecosystem':
            interface = self.ecosystem()
        elif item_type == 'environment':
            interface = self.environment()
        elif item_type == 'family':
            interface = self.family()
        elif item_type == 'habitat':
            interface = self.habitat()
        elif item_type == 'ou':
            interface = self.ou()
        elif item_type == 'region':
            interface = self.region()
        elif item_type == 'sshkey':
            interface = self.sshkey()
        elif item_type == 'sumo':
            interface = self.sumo()
        else:
            raise UnknownItemTypeError(f'The item_type {item_type} is not a currently supported type')
        return interface

    def account(self) -> AccountInterface:
        """
        Gets an account interface
        :return: An account interface
        """
        return AccountInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )

    def biome(self) -> BiomeInterface:
        """
        Gets a biome interface
        :return: A biome interface
        """
        return BiomeInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )

    def ecosystem(self) -> EcosystemInterface:
        """
        Gets an ecosystem interface
        :return: An ecosystem interface
        """
        return EcosystemInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )

    def environment(self) -> EnvironmentInterface:
        """
        Gets an environment interface
        :return: An environment interface
        """
        return EnvironmentInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )

    def family(self) -> FamilyInterface:
        """
        Gets a family interface
        :return: A family interface
        """
        return FamilyInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )

    def habitat(self) -> HabitatInterface:
        """
        Gets a habitat interface
        :return: A habitat interface
        """
        return HabitatInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )

    def ou(self) -> OuInterface:
        """
        Gets an ou interface
        :return: An ou interface
        """
        return OuInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )

    def region(self) -> RegionInterface:
        """
        Gets a region interface
        :return: A region interface
        """
        return RegionInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )

    def sshkey(self) -> SshKeyInterface:
        """
        Gets an sshkey interface
        :return: A sshkey interface
        """
        return SshKeyInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )

    def sumo(self) -> SumoInterface:
        """
        Gets a sumo interface
        :return: A sumo interface
        """
        return SumoInterface(
            connection=self.connection,
            lock_timestamp=self.lock_timestamp,
            cache_file_fallback=self.cache_file_fallback,
            cache_first=self.cache_first
        )
