"""This module generates envoy config"""
####################################################
# (C) Genesys, 2022, All Rights Reserved
#
# File Name: envoyexport.py
#
# Creation Date: 14-03-2023
#
# Created By: Mark Trimmer
#
# Purpose:
#
####################################################
from pathlib import Path
from typing import Any, Dict, List

from genesys_unified_config.envoy.bootstrap import bootstrap
from genesys_unified_config.envoy.cds import eds_cluster_resource, cds
from genesys_unified_config.envoy.constant import CDS_FILE_NAME, LDS_FILE_NAME, BOOTSTRAP_FILE_NAME, EDS_BASE_FILE_NAME, RDS_BASE_FILE_NAME, \
    SDS_BASE_FILE_NAME, FILE_EXT, DEFAULT_IP_ADDRESS, GENESYS_PRIVATE_KEY_FILE, GENESYS_CERT_FILE, ROOT_ROUTE_PREFIX, LOOPBACK_IP_ADDRESS, \
    ENVOY_ADMIN_PORT
from genesys_unified_config.envoy.eds import endpoint, eds_resource, eds
from genesys_unified_config.envoy.lds import listener_resource, lds
from genesys_unified_config.envoy.rds import route, route_configuration_resource, rds
from genesys_unified_config.envoy.sds import tls_cert_secret_resource, sds


# pylint: disable=C0115
class EnvoyExport:

    def __init__(self, unified_config: Dict[str, Any], tags_json: Dict[str, Any]):
        self.unified_config = unified_config
        self.tags_json = tags_json
        self.envoy_cluster_name = ''
        self.envoy_config_items: List[Dict[str, Any]] = [{}]
        self._convert_to_envoy_config_items()

    def _convert_to_envoy_config_items(self):
        """This function converts the unified config to a list of envoy config items"""
        envoy_config_items = []
        names = []
        for app_name, app_obj in self.unified_config.get('build', {}).get('ec2', {}).get('applications', {}).items():
            names.append(app_name)
            for port, port_obj in app_obj.get('ports', {}).items():
                proxy = port_obj.get('proxy', {})
                envoy_config_items.append({
                    'app_name': f'{app_name}-{port}-{self.tags_json["instanceId"]}',
                    'app_port': port,
                    'proxy_enabled': proxy.get('enabled', False),
                    'proxy': proxy
                })

        self.envoy_config_items = envoy_config_items
        self.envoy_cluster_name = '-'.join(names) + '-' + self.tags_json['instanceId']

    def is_envoy_enabled(self) -> bool:
        """
        A function to determine if envoy is enabled

        :return: True when envoy proxy is enabled else False
        """
        for envoy_config_item in self.envoy_config_items:
            if envoy_config_item['proxy_enabled'] is True:
                return True
        return False

    def process(self, destination_dir: Path) -> Dict[Path, Dict[str, Any]]:
        """
        Creates and returns the envoy configuration files content

        :param destination_dir: the directory where envoy config files needs to be stored
        :return: A dict containing configuration filepath as key and content of the configuration file as value
        """
        envoy_config_map = {}  # map key = filename path and value = config

        if self.is_envoy_enabled():
            instance_id = self.tags_json['instanceId']
            cds_file_path = destination_dir.joinpath(CDS_FILE_NAME)
            lds_file_path = destination_dir.joinpath(LDS_FILE_NAME)
            bootstrap_file_path = destination_dir.joinpath(BOOTSTRAP_FILE_NAME)
            cds_resources = []
            lds_resources = []

            for index, envoy_config_item in enumerate(filter(lambda item: item['proxy_enabled'] is True, self.envoy_config_items)):
                name = envoy_config_item['app_name']
                app_port = envoy_config_item['app_port']
                listener_port = envoy_config_item['proxy']['port']
                http_stat_prefix = f'{name}-http-ingress'
                route_timeout = envoy_config_item['proxy']['routeTimeoutSeconds'] if 'routeTimeoutSeconds' in envoy_config_item['proxy'] else None
                eds_file = destination_dir.joinpath(f'{EDS_BASE_FILE_NAME}{index + 1}.{FILE_EXT}')
                rds_file = destination_dir.joinpath(f'{RDS_BASE_FILE_NAME}{index + 1}.{FILE_EXT}')
                sds_file = destination_dir.joinpath(f'{SDS_BASE_FILE_NAME}{index + 1}.{FILE_EXT}')

                # create the cds resources
                cds_resources.append(eds_cluster_resource(cluster_name=name, eds_file=eds_file))

                # add eds file content to config map
                envoy_config_map[eds_file] = self.__create_eds_content(name, app_port)

                # create the lds resources
                lds_resources.append(listener_resource(
                    listener_name=name, listener_address=DEFAULT_IP_ADDRESS, listener_port=listener_port,
                    http_stat_prefix_name=http_stat_prefix,
                    route_name=name, rds_file=rds_file,
                    secret_name=name, sds_file=sds_file
                ))

                # add rds file content to config map
                envoy_config_map[rds_file] = self.__create_rds_content(name, route_timeout)

                # add sds file content to config map
                envoy_config_map[sds_file] = self.__create_sds_content(name)

            # create the cds file content and append to config map
            envoy_config_map[cds_file_path] = cds(cluster_resources=cds_resources)

            # create the lds file content and append to config map
            envoy_config_map[lds_file_path] = lds(listener_resources=lds_resources)

            # create the bootstrap file content and append to config map
            envoy_config_map[bootstrap_file_path] = bootstrap(
                admin_address=DEFAULT_IP_ADDRESS, admin_port=ENVOY_ADMIN_PORT,
                cluster_name=self.envoy_cluster_name, node_id=instance_id,
                cds_file=cds_file_path, lds_file=lds_file_path,
            )

        return envoy_config_map

    @staticmethod
    def __create_sds_content(secret_name) -> Dict[str, Any]:
        """Creates the content for envoy secret discovery service file"""
        sds_resources = [
            tls_cert_secret_resource(
                secret_name=secret_name,
                cert_chain_file=GENESYS_CERT_FILE,
                private_key_file=GENESYS_PRIVATE_KEY_FILE
            )
        ]
        sds_content = sds(sds_resources=sds_resources)
        return sds_content

    @staticmethod
    def __create_rds_content(route_name: str, route_timeout_seconds: int) -> Dict[str, Any]:
        """Creates the contents for envoy route discovery service file"""
        routes = [route(prefix=ROOT_ROUTE_PREFIX, cluster_name=route_name, timeout_seconds=route_timeout_seconds)]
        route_resources = [route_configuration_resource(route_name=route_name, routes=routes)]
        rds_content = rds(route_configuration_resources=route_resources)
        return rds_content

    @staticmethod
    def __create_eds_content(cluster_name: str, app_port: int) -> Dict[str, Any]:
        """Creates the contents for envoy endpoint discovery service file."""
        app_endpoint = endpoint(address=LOOPBACK_IP_ADDRESS, port=app_port)
        eds_content = eds(resources=[eds_resource(cluster_name=cluster_name, endpoints=[app_endpoint])])
        return eds_content
