"""Helper function to generate receiver portions"""
from typing import Dict, List
from .constants import RECEIVER_OTLP, RECEIVER_HOSTMETRICS, RECEIVER_HOSTMETRICS_DISK, RECEIVER_PROMETHEUS


def generate_host_scraper(interval: str, scrapers: Dict) -> Dict:
    """helper function to generate host scraper config"""
    return {
        'collection_interval': interval,
        'scrapers': scrapers
    }


def generate_receiver_config(telemetry_config: Dict, envoy_config: Dict) -> Dict:
    """helper function to generate overall receiver config"""
    config = {
        RECEIVER_OTLP: {
            'protocols': {
                'http': {
                    'endpoint': f"localhost:{telemetry_config['ports']['collector']}"
                }
            }
        },
        RECEIVER_HOSTMETRICS: generate_host_scraper(interval='30s',
                                                    scrapers={
                                                        'cpu': {},
                                                        'memory': {},
                                                        'load': {},
                                                        'network': {},
                                                        'paging': {},
                                                        'processes': {},
                                                        'process': {'mute_process_name_error': True}
                                                    }),
        RECEIVER_HOSTMETRICS_DISK: generate_host_scraper(interval='1m',
                                                         scrapers={
                                                             'disk': {},
                                                             'filesystem': {}
                                                         })

    }

    scrape_configs = [generate_prometheus_scraper(job_name='otel-collector',
                                                  interval='30s',
                                                  targets=[f"0.0.0.0:{telemetry_config['ports']['collectorMetrics']}"])]

    if envoy_config:
        scrape_configs.append(generate_prometheus_scraper(job_name='envoy',
                                                          interval='30s',
                                                          metrics_path='/stats/prometheus',
                                                          targets=["0.0.0.0:10000"]))

    config[RECEIVER_PROMETHEUS] = {
        'config': {
            'scrape_configs': scrape_configs
        }
    }

    return config


def generate_prometheus_scraper(job_name: str, interval: str, targets: List[str],
                                metrics_path: str = None) -> Dict:
    """helper function to generate prometheus scrapers"""
    config = {
        'job_name': job_name,
        'scrape_interval': interval,
        'static_configs': [{'targets': targets}]
    }

    if metrics_path:
        config['metrics_path'] = metrics_path

    return config
