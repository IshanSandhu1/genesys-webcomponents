"""Generates the overall config file"""
from os import environ
from typing import Dict, List

from .constants import EXPORTER_LOGGING, PROCESS_RESOURCE, PROCESSOR_RESOURCE_DETECTION_EC2, \
    PROCESSOR_RESOURCE_DETECTION_SYSTEM, PROCESS_TRANSFORM_TRUNCATE, PROCESSOR_PROBABILISTIC_SAMPLER, \
    PROCESSOR_TAIL_SAMPLING, PROCESSOR_MEMORY_LIMITER, PROCESS_BATCH, PROCESS_ATTRIBUTES_TRANSFORM, RECEIVER_OTLP, \
    EXPORTER_NEW_RELIC_TRACES, RECEIVER_PROMETHEUS, PROCESS_TRANSFORM_ENTITY, PROCESSOR_CUMULATIVE_TO_DELTA, \
    EXPORTER_NEW_RELIC_METRICS, RECEIVER_HOSTMETRICS_DISK, RECEIVER_HOSTMETRICS, ENV_OTEL_COLLECTOR_LOG_LEVEL
from .exporters import generate_exporters_config
from .processors import generate_processors_config
from .receivers import generate_receiver_config


def generate_service_pipeline(receivers: List[str], processors: List[str], exporters: List[str]):
    """generates service pipeline and auto-injects the logging exporter"""
    if environ.get(ENV_OTEL_COLLECTOR_LOG_LEVEL):
        exporters.append(EXPORTER_LOGGING)
    return {
        'receivers': receivers,
        'processors': processors,
        'exporters': exporters
    }


def generate_open_telemetry_config(unified_config: Dict,
                                   tags: Dict,
                                   collector_log_dir: str,
                                   nr_trace_url: str = 'https://otlp.nr-data.net/',
                                   nr_metric_url: str = 'https://otlp.nr-data.net/'):
    """helper function to generate open telemetry overall config"""
    envoy_config = unified_config.get('build', {}).get('ec2', {}).get('applications', {})
    telemetry_config = unified_config.get('build', {}).get('ec2', {}).get('telemetry', {})

    service_name = unified_config['service']['name']

    instance_id = tags.get('instanceId', 'MissingInstanceId')
    version = tags.get('version', 'MissingVersion')
    habitat = tags.get('hyperion_habitat', 'MissingHabitat')

    config = {
        'receivers': generate_receiver_config(telemetry_config=telemetry_config, envoy_config=envoy_config),
        'processors': generate_processors_config(telemetry_config=telemetry_config,
                                                 service_name=service_name,
                                                 habitat=habitat,
                                                 instance_id=instance_id,
                                                 version=version,
                                                 tags=tags),
        'exporters': generate_exporters_config(trace_endpoint=nr_trace_url,
                                               metric_endpoint=nr_metric_url)
    }

    trace_processors = [PROCESS_RESOURCE,
                        PROCESSOR_RESOURCE_DETECTION_EC2,
                        PROCESSOR_RESOURCE_DETECTION_SYSTEM,
                        PROCESS_TRANSFORM_TRUNCATE,
                        PROCESSOR_PROBABILISTIC_SAMPLER,
                        PROCESSOR_TAIL_SAMPLING,
                        PROCESSOR_MEMORY_LIMITER,
                        PROCESS_BATCH]

    if telemetry_config['traces'].get('attributes', {}).items():
        trace_processors.append(PROCESS_ATTRIBUTES_TRANSFORM)

    config['service'] = {
        'extensions': [],
        'pipelines': {
            'traces': generate_service_pipeline(
                receivers=[RECEIVER_OTLP],
                processors=trace_processors,
                exporters=[EXPORTER_NEW_RELIC_TRACES]
            ),
            'metrics/newrelic': generate_service_pipeline(
                receivers=[RECEIVER_OTLP, RECEIVER_PROMETHEUS],
                processors=[PROCESS_RESOURCE,
                            PROCESSOR_RESOURCE_DETECTION_EC2,
                            PROCESSOR_RESOURCE_DETECTION_SYSTEM,
                            PROCESS_TRANSFORM_ENTITY,
                            PROCESSOR_CUMULATIVE_TO_DELTA,
                            PROCESSOR_MEMORY_LIMITER,
                            PROCESS_BATCH],
                exporters=[EXPORTER_NEW_RELIC_METRICS]
            ),
            'metrics/newrelic/host': generate_service_pipeline(
                receivers=[RECEIVER_HOSTMETRICS, RECEIVER_HOSTMETRICS_DISK],
                processors=[PROCESS_RESOURCE,
                            PROCESSOR_RESOURCE_DETECTION_EC2,
                            PROCESSOR_RESOURCE_DETECTION_SYSTEM,
                            PROCESSOR_CUMULATIVE_TO_DELTA,
                            PROCESSOR_MEMORY_LIMITER,
                            PROCESS_BATCH],
                exporters=[EXPORTER_NEW_RELIC_METRICS]
            )
        },
        'telemetry': {
            'logs': {
                'encoding': 'json',
                'initial_fields': {
                    'service_name': f'{service_name}-{habitat}',
                    'service.instance.id': instance_id,
                    'service.id': instance_id,
                    'service.version': version
                },
                'output_paths': [f'{collector_log_dir}/output.log'],
                'error_output_paths': [f'{collector_log_dir}/error.log']
            },
            'metrics': {
                'address': f"0.0.0.0:{telemetry_config['ports']['collectorMetrics']}"
            }
        }
    }

    if environ.get(ENV_OTEL_COLLECTOR_LOG_LEVEL):
        config['service']['telemetry']['logs']['level'] = environ.get(
            ENV_OTEL_COLLECTOR_LOG_LEVEL)

    return config
