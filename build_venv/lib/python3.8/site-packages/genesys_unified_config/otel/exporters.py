"""functions to generate exporter config"""
from os import environ
from typing import Dict

from .constants import EXPORTER_NEW_RELIC_TRACES, EXPORTER_NEW_RELIC_METRICS, \
    EXPORTER_LOGGING, ENV_OTEL_COLLECTOR_LOG_LEVEL, ENV_OT_NEWRELIC_LICENSE_KEY

COMPRESSION_TYPE = 'gzip'


def generate_nr_config(endpoint: str) -> Dict:
    """generate config needed to push telemetry to new relic"""
    if not environ.get(ENV_OT_NEWRELIC_LICENSE_KEY):
        raise Exception(f"{ENV_OT_NEWRELIC_LICENSE_KEY} environment variable not set. Please set it to proceed.")

    return {
        'compression': COMPRESSION_TYPE,
        'endpoint': endpoint,
        'headers': {'api-key': environ.get(ENV_OT_NEWRELIC_LICENSE_KEY)}
    }


def generate_exporters_config(trace_endpoint: str, metric_endpoint: str) -> Dict:
    """generates exporter config for otel"""
    config = {
        EXPORTER_NEW_RELIC_TRACES: generate_nr_config(endpoint=trace_endpoint),
        EXPORTER_NEW_RELIC_METRICS: generate_nr_config(
            endpoint=metric_endpoint)
    }

    if environ.get(ENV_OTEL_COLLECTOR_LOG_LEVEL):
        config[EXPORTER_LOGGING] = {
            'loglevel': environ.get(ENV_OTEL_COLLECTOR_LOG_LEVEL)}

    return config
