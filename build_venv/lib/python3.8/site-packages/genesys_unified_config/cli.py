####################################################
# (C) Genesys, 2022, All Rights Reserved
#
# File Name: cli.py
#
# Creation Date: 14-03-2023
#
# Created By: Mark Trimmer
#
# Purpose:
#
####################################################
"""Cli Entry Point"""
from typing import Any, Dict
from argparse import ArgumentParser, Namespace
from pathlib import Path

import json
import yaml


from .otel.constants import TAGS_JSON_FILE
from .envoyexport import EnvoyExport
from .otelexport import OtelExport

APP_DESCRIPTION = 'Genesys Unified Config Exporter'


# CLI entry point
def export():
    """This is the cli entry point to export certain config"""
    # ArgParse for export CLIs
    parser = ArgumentParser(prog='UnifiedConfigExporter', description=APP_DESCRIPTION)

    # Common Parameters
    parser.add_argument(
        '--resolved-unified-config-dir',
        help='Directory holding pre-resolved unified config files',
        default=Path('/opt/genesys/unified-config'),
        type=Path,
    )
    parser.add_argument(
        '--habitat', help='Hyperion Habitat Name, Will be auto detected on EC2')

    parser.add_argument(
        '--tags', help='Path to tags.json file. Will be auto detected on EC2')

    # Sub Commands: Some sub commands may have different flags needed
    sub_parser = parser.add_subparsers(dest='subcommand')

    # Envoy Command
    envoy_parser = sub_parser.add_parser('envoy', help='Envoy Config Exporter')
    envoy_parser.add_argument('--dest', type=Path, required=True)

    # Otel Command
    envoy_parser = sub_parser.add_parser('otel', help='Otel Config Exporter')
    envoy_parser.add_argument('--dest', type=Path, required=True)

    args = parser.parse_args()

    handlers = {
        'envoy': export_envoy,
        'otel': export_otel,
    }

    if args.subcommand in handlers:
        handlers[args.subcommand](args)
    else:
        parser.print_help()


def load_tags_json(args) -> Dict[str, Any]:
    """loads the tags json file"""
    tags_path = TAGS_JSON_FILE
    if 'tags' in args and args.tags is not None:
        tags_path = args.tags
    with Path(tags_path).open() as fin:
        return json.load(fin)


def load_config(args: Namespace):
    """Loading resolved unified config files"""
    if 'habitat' in args and args.habitat is not None:
        habitat = args.habitat
    else:
        tags = load_tags_json(args)
        habitat = tags['hyperion_habitat']
    config_paths = [
        args.resolved_unified_config_dir / f'{habitat}.json',
        args.resolved_unified_config_dir / 'default.json',
    ]
    path = None
    for tmp_path in config_paths:
        if tmp_path.exists():
            path = tmp_path
            break
    if path is None:
        raise Exception(
            f'Could not find any unified config input files in {args.resolved_unified_config_dir} directory')
    with path.open() as fin:
        return json.load(fin)


# Envoy Handler
def export_envoy(args: Namespace):
    """Envoy Handler"""
    envoy_export = EnvoyExport(unified_config=load_config(args), tags_json=load_tags_json(args))
    envoy_config_map = envoy_export.process(args.dest)
    for config_file_path, config_file_content in envoy_config_map.items():
        with config_file_path.open('w') as file_out:
            yaml.safe_dump(config_file_content, file_out, sort_keys=False)


def export_otel(args: Namespace):
    """Otel Handler"""
    otel_export = OtelExport(load_config(args), tags=load_tags_json(args))
    res = otel_export.process()

    with args.dest.open('w') as fout:
        yaml.safe_dump(res, fout, default_flow_style=False, sort_keys=False)
