"""This module contain envoy listener configs"""
from typing import Any, List, Dict, Union
from pathlib import Path
from genesys_unified_config.envoy.common import socket_address, path_config_source
from genesys_unified_config.envoy.constant import CIPHER_SUITES


# pylint: disable=E1136
def listener_resource(
        listener_name: str,
        listener_address: str, listener_port: Union[int, str],
        http_stat_prefix_name: str,
        route_name: str, rds_file: Path,
        secret_name: str, sds_file: Path
) -> Dict[str, Any]:
    """
    A function to generate envoy listener resource

    :param listener_name: Name of the envoy listener
    :param listener_address: IP address of the listener
    :param listener_port: Port of the listener
    :param http_stat_prefix_name: name of the http stat prefix. This is used as metadata for envoy statistics and metrics
    :param route_name: Name of the route configuration
    :param rds_file: The rds file containing the route configuration. The route name should match the name in rds file.
    :param secret_name: Name of the secret
    :param sds_file: The sds file containing the secret configuration. The secret name should match the name in secret file.

    :return: Envoy listener resource configuration
    """
    return {
        '@type': 'type.googleapis.com/envoy.config.listener.v3.Listener',
        'name': listener_name,
        'address': socket_address(listener_address, listener_port),
        'filter_chains': [
            {
                'filters': [
                    {
                        'name': 'http_connection_manager_filter',
                        'typed_config': {
                            '@type': 'type.googleapis.com/envoy.extensions.filters.network.'
                                     'http_connection_manager.v3.HttpConnectionManager',
                            'stat_prefix': http_stat_prefix_name,
                            'http_filters': [
                                {
                                    'name': 'http_router_filter',
                                    'typed_config': {
                                        '@type': 'type.googleapis.com/envoy.extensions.filters.http.router.v3.Router'
                                    }
                                }
                            ],
                            'rds': {
                                'route_config_name': route_name,
                                'config_source': path_config_source(rds_file)
                            }
                        }
                    }
                ],
                'transport_socket': {
                    'name': 'envoy.transport_sockets.tls',
                    'typed_config': {
                        '@type': 'type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext',
                        'common_tls_context': {
                            'tls_params': {
                                'cipher_suites': CIPHER_SUITES
                            },
                            'tls_certificate_sds_secret_configs': {
                                'name': secret_name,
                                'sds_config': path_config_source(sds_file)
                            }
                        }
                    }
                }
            }
        ]
    }


def lds(listener_resources: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    A function to generate listener discovery service file content

    :param listener_resources: A list of listener resource to include in listener discovery file

    :return: Envoy listener discovery service file content.
    """
    return {
        'version_info': '0',
        'resources': listener_resources
    }
