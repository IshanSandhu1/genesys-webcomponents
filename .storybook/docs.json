{
  "timestamp": "2022-11-17T18:08:42",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.18.1",
    "typescriptVersion": "4.7.4"
  },
  "components": [
    {
      "filePath": "./src/components/stable/gux-accordion/gux-accordion.tsx",
      "encapsulation": "shadow",
      "tag": "gux-accordion",
      "readme": "# gux-accordion\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "singleOpenSection",
          "type": "boolean",
          "mutable": false,
          "attr": "single-open-section",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "internalsectionopened",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/legacy/gux-accordion-legacy/gux-accordion.tsx",
      "encapsulation": "none",
      "tag": "gux-accordion-legacy",
      "readme": "# gux-accordion-legacy\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "arrowPosition",
          "type": "\"beside-text\" | \"default\"",
          "mutable": false,
          "attr": "arrow-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "beside-text",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "number",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "The heading level within the page the\naccordion section headers should be set to.\nheading-level=\"3\" woudl be equivalent to an\nh3 element.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close(slotName: string) => Promise<void>",
          "parameters": [],
          "docs": "Closes a section.",
          "docsTags": [
            {
              "name": "param",
              "text": "slotName The slot name"
            }
          ]
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open(slotName: string) => Promise<void>",
          "parameters": [],
          "docs": "Opens a section.",
          "docsTags": [
            {
              "name": "param",
              "text": "slotName The slot name"
            }
          ]
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle(slotName: string) => Promise<void>",
          "parameters": [],
          "docs": "Toggles a section.",
          "docsTags": [
            {
              "name": "param",
              "text": "slotName The slot name"
            }
          ]
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-accordion-legacy": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-accordion/gux-accordion-section/gux-accordion-section.tsx",
      "encapsulation": "shadow",
      "tag": "gux-accordion-section",
      "readme": "# gux-accordion\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "header - Required slot for the heading"
        },
        {
          "name": "slot",
          "text": "subheader - Optional slot for a subheader\n*"
        },
        {
          "name": "slot",
          "text": "icon - Optional slot for an icon"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "arrowPosition",
          "type": "\"before-text\" | \"beside-text\" | \"default\"",
          "mutable": false,
          "attr": "arrow-position",
          "reflectToAttr": false,
          "docs": "Position of the arrow chevron icon. Position can be 'default' or 'before-text'.  'beside-text' is deprecated and will be removed in v4.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "before-text",
              "type": "string"
            },
            {
              "value": "beside-text",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contentLayout",
          "type": "\"custom\" | \"text\"",
          "mutable": false,
          "attr": "content-layout",
          "reflectToAttr": false,
          "docs": "The content layout used in the accordion section. 'text' layout provides default padding, 'custom' removes default padding.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "custom",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reverseHeadings",
          "type": "boolean",
          "mutable": false,
          "attr": "reverse-headings",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internalsectionopened",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "header",
          "docs": "Required slot for the heading"
        },
        {
          "name": "icon",
          "docs": "Optional slot for an icon"
        },
        {
          "name": "subheader",
          "docs": "Optional slot for a subheader\n*"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-accordion-section": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-action-button/gux-action-button.tsx",
      "encapsulation": "shadow",
      "tag": "gux-action-button",
      "readme": "# gux-action-button\nAn action button. In order to use this element toggle children must be slotted in.\n\nExample usage\n```html\n  <gux-action-button text=\"Primary\" accent=\"primary\">\n    <gux-list-item onclick=\"notify(event)\">Test 1</gux-list-item>\n    <gux-list-item onclick=\"notify(event)\">Test 2</gux-list-item>\n    <gux-list-item onclick=\"notify(event)\">Test 3</gux-list-item>\n    <gux-list-divider></gux-list-divider>\n    <gux-list-item onclick=\"notify(event)\">Test 4</gux-list-item>\n  </gux-action-button>\n```\n",
      "docs": "An action button. In order to use this element toggle children must be slotted in.\n\nExample usage\n```html\n  <gux-action-button text=\"Primary\" accent=\"primary\">\n    <gux-list-item onclick=\"notify(event)\">Test 1</gux-list-item>\n    <gux-list-item onclick=\"notify(event)\">Test 2</gux-list-item>\n    <gux-list-item onclick=\"notify(event)\">Test 3</gux-list-item>\n    <gux-list-divider></gux-list-divider>\n    <gux-list-item onclick=\"notify(event)\">Test 4</gux-list-item>\n  </gux-action-button>\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"danger\" | \"ghost\" | \"primary\" | \"secondary\" | \"tertiary\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'secondary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "ghost",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the action button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "mutable": true,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "It is used to open or not the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The component text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The component button type",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "actionClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the action button is clicked",
          "docsTags": []
        },
        {
          "event": "close",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the menu is close",
          "docsTags": []
        },
        {
          "event": "open",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the menu is open",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-popup",
        "gux-button-slot-beta",
        "gux-icon",
        "gux-list"
      ],
      "dependencyGraph": {
        "gux-action-button": [
          "gux-popup",
          "gux-button-slot-beta",
          "gux-icon",
          "gux-list"
        ]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-action-button-legacy/gux-action-button.tsx",
      "encapsulation": "shadow",
      "tag": "gux-action-button-legacy",
      "readme": "# gux-action-button-legacy\nAn action button. In order to use this element toggle children must be slotted in.\n\nExample usage\n```html\n<gux-action-button-legacy text=\"Button Text\">\n  <gux-action-item value=\"test\" text=\"test\"/>\n  <gux-action-item value=\"test2\" text=\"test2\"/>\n  <gux-action-item value=\"test3\" text=\"test3\"/>\n</gux-action-button-legacy>\n```\n",
      "docs": "An action button. In order to use this element toggle children must be slotted in.\n\nExample usage\n```html\n<gux-action-button-legacy text=\"Button Text\">\n  <gux-action-item value=\"test\" text=\"test\"/>\n  <gux-action-item value=\"test2\" text=\"test2\"/>\n  <gux-action-item value=\"test3\" text=\"test3\"/>\n</gux-action-button-legacy>\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"primary\" | \"secondary\" | \"tertiary\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'secondary'",
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the action button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "mutable": true,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "It is used to open or not the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The component text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The component button type",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "actionClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the action button is clicked",
          "docsTags": []
        },
        {
          "event": "close",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the menu is close",
          "docsTags": []
        },
        {
          "event": "open",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the menu is open",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-popup",
        "gux-button-slot-beta",
        "gux-icon",
        "gux-action-list-legacy"
      ],
      "dependencyGraph": {
        "gux-action-button-legacy": [
          "gux-popup",
          "gux-button-slot-beta",
          "gux-icon",
          "gux-action-list-legacy"
        ]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-action-list-legacy/gux-action-item/gux-action-item.tsx",
      "encapsulation": "shadow",
      "tag": "gux-action-item",
      "readme": "# gux-action-item\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "unknown",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "unknown"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "press",
          "detail": "unknown",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/legacy/gux-action-list-legacy/gux-action-list-divider/gux-action-list-divider.tsx",
      "encapsulation": "shadow",
      "tag": "gux-action-list-divider",
      "readme": "# gux-action-list-divider\nA divider to display in an action list.\n\n",
      "docs": "A divider to display in an action list.",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/legacy/gux-action-list-legacy/gux-action-list.tsx",
      "encapsulation": "shadow",
      "tag": "gux-action-list-legacy",
      "readme": "# gux-action-list\n\nA list element. In order to use this element list contents must be slotted in.\n\nExample usage\n\n```html\n<gux-action-list>\n  <gux-action-list-item value=\"test\" text=\"test1\" />\n  <gux-action-list-divider />\n  <gux-action-list-item value=\"test\" text=\"test2\" />\n  <gux-action-list-item value=\"test\" text=\"test3\" />\n</gux-action-list>\n```\n\nExample with slotting\n\n```html\n<gux-action-list>\n  <gux-action-list-item\n    ><span>⌘</span><gux-text-highlight text=\"test\"\n  /></gux-action-list-item>\n</gux-action-list>\n```\n",
      "docs": "A list element. In order to use this element list contents must be slotted in.\n\nExample usage\n\n```html\n<gux-action-list>\n  <gux-action-list-item value=\"test\" text=\"test1\" />\n  <gux-action-list-divider />\n  <gux-action-list-item value=\"test\" text=\"test2\" />\n  <gux-action-list-item value=\"test\" text=\"test3\" />\n</gux-action-list>\n```\n\nExample with slotting\n\n```html\n<gux-action-list>\n  <gux-action-list-item\n    ><span>⌘</span><gux-text-highlight text=\"test\"\n  /></gux-action-list-item>\n</gux-action-list>\n```",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "isFirstItemSelected",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "isFirstItemSelected() => Promise<boolean>",
          "parameters": [],
          "docs": "Returns whether the first item in the list is selected.",
          "docsTags": []
        },
        {
          "name": "isLastItemSelected",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "isLastItemSelected() => Promise<boolean>",
          "parameters": [],
          "docs": "Returns whether the last item in the list is selected.",
          "docsTags": []
        },
        {
          "name": "setFocusOnFirstItem",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocusOnFirstItem() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocusOnLastItem",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocusOnLastItem() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-action-button-legacy", "gux-button-multi-legacy"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-action-button-legacy": ["gux-action-list-legacy"],
        "gux-button-multi-legacy": ["gux-action-list-legacy"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-action-toast/gux-action-toast.tsx",
      "encapsulation": "shadow",
      "tag": "gux-action-toast",
      "readme": "# gux-action-toast\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \n",
      "docs": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
      "docsTags": [
        {
          "name": "slot",
          "text": "icon - Required slot for gux-icon"
        },
        {
          "name": "slot",
          "text": "title - Required slot for the action toast title"
        },
        {
          "name": "slot",
          "text": "message - Required slot for the action toast message"
        },
        {
          "name": "slot",
          "text": "negative-button - Required slot for the action toast negative button"
        },
        {
          "name": "slot",
          "text": "positive-button - Required slot for the action toast positive button"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "icon",
          "docs": "Required slot for gux-icon"
        },
        {
          "name": "message",
          "docs": "Required slot for the action toast message"
        },
        {
          "name": "negative-button",
          "docs": "Required slot for the action toast negative button"
        },
        {
          "name": "positive-button",
          "docs": "Required slot for the action toast positive button"
        },
        {
          "name": "title",
          "docs": "Required slot for the action toast title"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-advanced-dropdown/gux-advanced-dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "gux-advanced-dropdown",
      "readme": "# gux-advanced-dropdown\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n",
      "docs": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable the input and prevent interactions.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dropdownHeight",
          "type": "string",
          "mutable": false,
          "attr": "dropdown-height",
          "reflectToAttr": false,
          "docs": "CSS string used to set the maximum height of the dropdown option container. Default is set to 10 options as defined by UX.",
          "docsTags": [],
          "default": "'320px'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterDebounceTimeout",
          "type": "number",
          "mutable": false,
          "attr": "filter-debounce-timeout",
          "reflectToAttr": false,
          "docs": "Timeout between filter input changed and event being emitted.",
          "docsTags": [],
          "default": "500",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noFilter",
          "type": "boolean",
          "mutable": false,
          "attr": "no-filter",
          "reflectToAttr": false,
          "docs": "Whether the list should filter its current options.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The dropdown's placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedValues",
          "returns": {
            "type": "Promise<string[]>",
            "docs": "The array of selected values."
          },
          "signature": "getSelectedValues() => Promise<string[]>",
          "parameters": [],
          "docs": "Gets the currently selected values.",
          "docsTags": [
            {
              "name": "returns",
              "text": "The array of selected values."
            }
          ]
        },
        {
          "name": "setLabeledBy",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setLabeledBy(id: string) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "filter",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the filter of the advanced dropdown changes.",
          "docsTags": []
        },
        {
          "event": "input",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the value of the advanced dropdown changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-popup", "gux-icon", "gux-form-field-search"],
      "dependencyGraph": {
        "gux-advanced-dropdown": [
          "gux-popup",
          "gux-icon",
          "gux-form-field-search"
        ],
        "gux-form-field-search": [
          "gux-icon",
          "gux-form-field-input-clear-button"
        ],
        "gux-form-field-input-clear-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-table/gux-all-row-select/gux-all-row-select.tsx",
      "encapsulation": "none",
      "tag": "gux-all-row-select",
      "readme": "# gux-row-select\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setIndeterminate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setIndeterminate(indeterminate?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "internalallrowselectchange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "input",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-form-field-checkbox"],
      "dependencyGraph": {
        "gux-all-row-select": ["gux-form-field-checkbox"],
        "gux-form-field-checkbox": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-announce/gux-announce.tsx",
      "encapsulation": "shadow",
      "tag": "gux-announce-beta",
      "readme": "# gux-announce",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- element"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "politeness",
          "type": "\"assertive\" | \"off\" | \"polite\"",
          "mutable": false,
          "attr": "politeness",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'polite'",
          "values": [
            {
              "value": "assertive",
              "type": "string"
            },
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "polite",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxAnnounce",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxAnnounce(text: string) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "element"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-badge/gux-badge.tsx",
      "encapsulation": "shadow",
      "tag": "gux-badge-beta",
      "readme": "# gux-badge-beta\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bold",
          "type": "boolean",
          "mutable": false,
          "attr": "bold",
          "reflectToAttr": false,
          "docs": "Bold badge.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Badge background color.",
          "docsTags": [],
          "default": "'neutral'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-tooltip-title"],
      "dependencyGraph": {
        "gux-badge-beta": ["gux-tooltip-title"],
        "gux-tooltip-title": ["gux-tooltip"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-blank-state/gux-blank-state.tsx",
      "encapsulation": "shadow",
      "tag": "gux-blank-state-beta",
      "readme": "# gux-message-beta\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "primary-message - Required slot for primary-message."
        },
        {
          "name": "slot",
          "text": "image - Slot for gux-icon element."
        },
        {
          "name": "slot",
          "text": "additional-guidance - Slot for additional-guidance."
        },
        {
          "name": "slot",
          "text": "call-to-action - Slot for the message call to action button."
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "additional-guidance",
          "docs": "Slot for additional-guidance."
        },
        {
          "name": "call-to-action",
          "docs": "Slot for the message call to action button."
        },
        {
          "name": "image",
          "docs": "Slot for gux-icon element."
        },
        {
          "name": "primary-message",
          "docs": "Required slot for primary-message."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-button-slot-beta"],
      "dependencyGraph": {
        "gux-blank-state-beta": ["gux-button-slot-beta"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-breadcrumbs/breadcrumb-item/gux-breadcrumb-item.tsx",
      "encapsulation": "shadow",
      "tag": "gux-breadcrumb-item",
      "readme": "# gux-dropdown-option\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-breadcrumb-item": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-breadcrumbs/gux-breadcrumbs.tsx",
      "encapsulation": "shadow",
      "tag": "gux-breadcrumbs",
      "readme": "# gux-breadcrumbs\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"primary\" | \"secondary\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-button/gux-button.tsx",
      "encapsulation": "shadow",
      "tag": "gux-button",
      "readme": "# gux-button\n\nThis custom component is a simple button having some styling on it.\nYou can choose between two type (secondary and primary).\n",
      "docs": "This custom component is a simple button having some styling on it.\nYou can choose between two type (secondary and primary).",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"danger\" | \"ghost\" | \"primary\" | \"secondary\" | \"tertiary\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'secondary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "ghost",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Indicate if the button is disabled or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "guxTitle",
          "type": "string",
          "mutable": false,
          "attr": "gux-title",
          "reflectToAttr": false,
          "docs": "The component title",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The component button type",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-button-multi/gux-button-multi.tsx",
      "encapsulation": "shadow",
      "tag": "gux-button-multi",
      "readme": "# gux-action-button\nAn action button. In order to use this element toggle children must be slotted in.\n\nExample usage\n```html\n<gux-action-button text=\"Button Text\">\n  <gux-action-item value=\"test\" text=\"test\"/>\n  <gux-action-item value=\"test2\" text=\"test2\"/>\n  <gux-action-item value=\"test3\" text=\"test3\"/>\n</gux-action-button>\n```\n",
      "docs": "An action button. In order to use this element toggle children must be slotted in.\n\nExample usage\n```html\n<gux-action-button text=\"Button Text\">\n  <gux-action-item value=\"test\" text=\"test\"/>\n  <gux-action-item value=\"test2\" text=\"test2\"/>\n  <gux-action-item value=\"test3\" text=\"test3\"/>\n</gux-action-button>\n```",
      "docsTags": [
        {
          "name": "slot",
          "text": "title - slot for icon and button text"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"danger\" | \"ghost\" | \"primary\" | \"secondary\" | \"tertiary\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'secondary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "ghost",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the action button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "mutable": true,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "It is used to open or not the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The component text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "close",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the menu is close",
          "docsTags": []
        },
        {
          "event": "open",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the menu is open",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "title",
          "docs": "slot for icon and button text"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-popup",
        "gux-button-slot-beta",
        "gux-icon",
        "gux-list"
      ],
      "dependencyGraph": {
        "gux-button-multi": [
          "gux-popup",
          "gux-button-slot-beta",
          "gux-icon",
          "gux-list"
        ]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-button-multi-legacy/gux-button-multi.tsx",
      "encapsulation": "shadow",
      "tag": "gux-button-multi-legacy",
      "readme": "# gux-button-multi-legacy\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"primary\" | \"secondary\" | \"tertiary\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'secondary'",
          "values": [
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the action button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "mutable": true,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "It is used to open or not the list.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The component text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "close",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the menu is close",
          "docsTags": []
        },
        {
          "event": "open",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the menu is open",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-popup",
        "gux-button-slot-beta",
        "gux-icon",
        "gux-action-list-legacy"
      ],
      "dependencyGraph": {
        "gux-button-multi-legacy": [
          "gux-popup",
          "gux-button-slot-beta",
          "gux-icon",
          "gux-action-list-legacy"
        ]
      }
    },
    {
      "filePath": "./src/components/beta/gux-button-slot/gux-button-slot.tsx",
      "encapsulation": "shadow",
      "tag": "gux-button-slot-beta",
      "readme": "# gux-button-slot",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- button, input[type=\"button\"] or input[type=\"submit\"] element"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"danger\" | \"ghost\" | \"primary\" | \"secondary\" | \"tertiary\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'secondary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "ghost",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "button, input[type=\"button\"] or input[type=\"submit\"] element"
        }
      ],
      "parts": [],
      "dependents": [
        "gux-action-button",
        "gux-action-button-legacy",
        "gux-blank-state-beta",
        "gux-button-multi",
        "gux-button-multi-legacy",
        "gux-pagination-buttons",
        "gux-pagination-buttons-beta",
        "gux-pagination-cursor",
        "gux-table-beta"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gux-action-button": ["gux-button-slot-beta"],
        "gux-action-button-legacy": ["gux-button-slot-beta"],
        "gux-blank-state-beta": ["gux-button-slot-beta"],
        "gux-button-multi": ["gux-button-slot-beta"],
        "gux-button-multi-legacy": ["gux-button-slot-beta"],
        "gux-pagination-buttons": ["gux-button-slot-beta"],
        "gux-pagination-buttons-beta": ["gux-button-slot-beta"],
        "gux-pagination-cursor": ["gux-button-slot-beta"],
        "gux-table-beta": ["gux-button-slot-beta"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-calendar/gux-calendar.tsx",
      "encapsulation": "shadow",
      "tag": "gux-calendar",
      "readme": "# genesys-calendar\n\nThis is a simple calendar component, that allows the user to select a date.\n",
      "docs": "This is a simple calendar component, that allows the user to select a date.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "maxDate",
          "type": "string",
          "mutable": false,
          "attr": "max-date",
          "reflectToAttr": false,
          "docs": "The max date selectable",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minDate",
          "type": "string",
          "mutable": false,
          "attr": "min-date",
          "reflectToAttr": false,
          "docs": "The min date selectable",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "CalendarModes.Range | CalendarModes.Single",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "The calendar mode (can be single or range)",
          "docsTags": [],
          "default": "CalendarModes.Single",
          "values": [
            {
              "type": "CalendarModes.Range"
            },
            {
              "type": "CalendarModes.Single"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberOfMonths",
          "type": "number",
          "mutable": false,
          "attr": "number-of-months",
          "reflectToAttr": false,
          "docs": "The calendar number of months displayed",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The calendar current selected date",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "focusPreviewDate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "focusPreviewDate() => Promise<void>",
          "parameters": [],
          "docs": "Focus the preview date",
          "docsTags": []
        },
        {
          "name": "resetCalendarView",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "resetCalendarView(value: Date) => Promise<void>",
          "parameters": [],
          "docs": "Reset calendar view to show first selected date",
          "docsTags": []
        },
        {
          "name": "setValue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setValue(value: Date | [Date, Date]) => Promise<void>",
          "parameters": [],
          "docs": "Sets new value and rerender the calendar",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "input",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when user selects a date",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-datepicker"],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-calendar": ["gux-icon"],
        "gux-datepicker": ["gux-calendar"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-card/gux-card.tsx",
      "encapsulation": "shadow",
      "tag": "gux-card-beta",
      "readme": "# gux-card-beta\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Content of card."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"filled\" | \"outline\" | \"raised\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "Card Accent.",
          "docsTags": [],
          "default": "'outline'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "raised",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Content of card."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-chart-column/gux-chart-column.tsx",
      "encapsulation": "shadow",
      "tag": "gux-chart-column-beta",
      "readme": "# gux-switch\n\n## Native Events\n\n| Event    | Description | Type               |\n| -------- | ----------- | ------------------ |\n| `change` |             | `InputEvent`       |\n| `input`  |             | `InputEvent`       |\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "chartData",
          "type": "{ [x: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Data to be rendered in the chart.\nData field names must match the values you set in xFieldName and yFieldName",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: any; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "chartLayers",
          "type": "string[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "List specifying the order of optional chart layers.\nFor correct chart layering, each chartData entry must also include a \"series\" field with a value indicating which layer the entry belongs to, e.g 'series': 'group1'",
          "docsTags": [],
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "embedOptions",
          "type": "EmbedOptions<string, Renderers>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "EmbedOptions<string, Renderers>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "includeLegend",
          "type": "boolean",
          "mutable": false,
          "attr": "include-legend",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendPosition",
          "type": "\"bottom\" | \"bottom-left\" | \"bottom-right\" | \"left\" | \"none\" | \"right\" | \"top\" | \"top-left\" | \"top-right\"",
          "mutable": false,
          "attr": "legend-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-left",
              "type": "string"
            },
            {
              "value": "bottom-right",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendTitle",
          "type": "string",
          "mutable": false,
          "attr": "legend-title",
          "reflectToAttr": false,
          "docs": "Title to display above the optional legend",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xAxisTitle",
          "type": "string",
          "mutable": false,
          "attr": "x-axis-title",
          "reflectToAttr": false,
          "docs": "Title to display along the x-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xFieldName",
          "type": "string",
          "mutable": false,
          "attr": "x-field-name",
          "reflectToAttr": false,
          "docs": "Name for the data field to use to populate the chart's x-axis\ne.g. xFieldName of \"category\" will map any \"category\" fields in chartData to the x-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xTickLabelSlant",
          "type": "boolean",
          "mutable": false,
          "attr": "x-tick-label-slant",
          "reflectToAttr": false,
          "docs": "If true, then make Axis tick label 45 degrees",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "yAxisTitle",
          "type": "string",
          "mutable": false,
          "attr": "y-axis-title",
          "reflectToAttr": false,
          "docs": "Title to display along the y-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "yFieldName",
          "type": "string",
          "mutable": false,
          "attr": "y-field-name",
          "reflectToAttr": false,
          "docs": "Name for the data field to use to populate the chart's x-axis\ne.g. yFieldName of \"value\" will map any \"value\" fields in chartData to the y-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-visualization-beta"],
      "dependencyGraph": {
        "gux-chart-column-beta": ["gux-visualization-beta"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-chart-donut/gux-chart-donut.tsx",
      "encapsulation": "shadow",
      "tag": "gux-chart-donut-beta",
      "readme": "# gux-chart-donut-beta\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "centerSubText",
          "type": "string",
          "mutable": false,
          "attr": "center-sub-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "centerText",
          "type": "string",
          "mutable": false,
          "attr": "center-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "chartData",
          "type": "{ [x: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Data to be rendered in the chart.\nData field names must match the values you set in xFieldName and yFieldName",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: any; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorFieldName",
          "type": "string",
          "mutable": false,
          "attr": "color-field-name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "embedOptions",
          "type": "EmbedOptions<string, Renderers>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "EmbedOptions<string, Renderers>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gauge",
          "type": "boolean",
          "mutable": false,
          "attr": "gauge",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "includeLegend",
          "type": "boolean",
          "mutable": false,
          "attr": "include-legend",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "innerRadius",
          "type": "number",
          "mutable": false,
          "attr": "inner-radius",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelField",
          "type": "string",
          "mutable": false,
          "attr": "label-field",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelRadius",
          "type": "number",
          "mutable": false,
          "attr": "label-radius",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendFontSize",
          "type": "number",
          "mutable": false,
          "attr": "legend-font-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendPosition",
          "type": "\"bottom\" | \"bottom-left\" | \"bottom-right\" | \"left\" | \"none\" | \"right\" | \"top\" | \"top-left\" | \"top-right\"",
          "mutable": false,
          "attr": "legend-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-left",
              "type": "string"
            },
            {
              "value": "bottom-right",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendSymbolSize",
          "type": "number",
          "mutable": false,
          "attr": "legend-symbol-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendTitle",
          "type": "string",
          "mutable": false,
          "attr": "legend-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendX",
          "type": "number",
          "mutable": false,
          "attr": "legend-x",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendY",
          "type": "number",
          "mutable": false,
          "attr": "legend-y",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outerRadius",
          "type": "number",
          "mutable": false,
          "attr": "outer-radius",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showTooltip",
          "type": "boolean",
          "mutable": false,
          "attr": "show-tooltip",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipOptions",
          "type": "EmbedOptions<string, Renderers>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "EmbedOptions<string, Renderers>"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-visualization-beta"],
      "dependencyGraph": {
        "gux-chart-donut-beta": ["gux-visualization-beta"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-chart-line/gux-chart-line.tsx",
      "encapsulation": "shadow",
      "tag": "gux-chart-line-beta",
      "readme": "# gux-switch\n\n## Native Events\n\n| Event    | Description | Type               |\n| -------- | ----------- | ------------------ |\n| `change` |             | `InputEvent`       |\n| `input`  |             | `InputEvent`       |\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "chartData",
          "type": "{ [x: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Data to be rendered in the chart.\nData field names must match the values you set in xFieldName and yFieldName",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: any; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorFieldName",
          "type": "string",
          "mutable": false,
          "attr": "color-field-name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "embedOptions",
          "type": "EmbedOptions<string, Renderers>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "EmbedOptions<string, Renderers>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "includeDataPointMarkers",
          "type": "boolean",
          "mutable": false,
          "attr": "include-data-point-markers",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "includeLegend",
          "type": "boolean",
          "mutable": false,
          "attr": "include-legend",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interpolation",
          "type": "string",
          "mutable": false,
          "attr": "interpolation",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendPosition",
          "type": "\"bottom\" | \"bottom-left\" | \"bottom-right\" | \"left\" | \"none\" | \"right\" | \"top\" | \"top-left\" | \"top-right\"",
          "mutable": false,
          "attr": "legend-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-left",
              "type": "string"
            },
            {
              "value": "bottom-right",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendTitle",
          "type": "string",
          "mutable": false,
          "attr": "legend-title",
          "reflectToAttr": false,
          "docs": "Title to display above the optional legend",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "strokeDash",
          "type": "boolean",
          "mutable": false,
          "attr": "stroke-dash",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xAxisTitle",
          "type": "string",
          "mutable": false,
          "attr": "x-axis-title",
          "reflectToAttr": false,
          "docs": "Title to display along the x-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xFieldName",
          "type": "string",
          "mutable": false,
          "attr": "x-field-name",
          "reflectToAttr": false,
          "docs": "Name for the data field to use to populate the chart's x-axis\ne.g. xFieldName of \"category\" will map any \"category\" fields in chartData to the x-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xTickLabelSlant",
          "type": "boolean",
          "mutable": false,
          "attr": "x-tick-label-slant",
          "reflectToAttr": false,
          "docs": "If true, then make Axis tick label 45 degrees",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "yAxisTitle",
          "type": "string",
          "mutable": false,
          "attr": "y-axis-title",
          "reflectToAttr": false,
          "docs": "Title to display along the y-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "yFieldName",
          "type": "string",
          "mutable": false,
          "attr": "y-field-name",
          "reflectToAttr": false,
          "docs": "Name for the data field to use to populate the chart's x-axis\ne.g. yFieldName of \"value\" will map any \"value\" fields in chartData to the y-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-visualization-beta"],
      "dependencyGraph": {
        "gux-chart-line-beta": ["gux-visualization-beta"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-chart-pie/gux-chart-pie.tsx",
      "encapsulation": "shadow",
      "tag": "gux-chart-pie-beta",
      "readme": "# gux-chart-donut-beta\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "chartData",
          "type": "{ [x: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Data to be rendered in the chart.\nData field names must match the values you set in xFieldName and yFieldName",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: any; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorFieldName",
          "type": "string",
          "mutable": false,
          "attr": "color-field-name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "embedOptions",
          "type": "EmbedOptions<string, Renderers>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "EmbedOptions<string, Renderers>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "includeLegend",
          "type": "boolean",
          "mutable": false,
          "attr": "include-legend",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelField",
          "type": "string",
          "mutable": false,
          "attr": "label-field",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelRadius",
          "type": "number",
          "mutable": false,
          "attr": "label-radius",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendPosition",
          "type": "\"bottom\" | \"bottom-left\" | \"bottom-right\" | \"left\" | \"none\" | \"right\" | \"top\" | \"top-left\" | \"top-right\"",
          "mutable": false,
          "attr": "legend-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-left",
              "type": "string"
            },
            {
              "value": "bottom-right",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendTitle",
          "type": "string",
          "mutable": false,
          "attr": "legend-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outerRadius",
          "type": "number",
          "mutable": false,
          "attr": "outer-radius",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-visualization-beta"],
      "dependencyGraph": {
        "gux-chart-pie-beta": ["gux-visualization-beta"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-chart-scatter-plot/gux-chart-scatter-plot.tsx",
      "encapsulation": "shadow",
      "tag": "gux-chart-scatter-plot-beta",
      "readme": "# gux-switch\n\n## Native Events\n\n| Event    | Description | Type               |\n| -------- | ----------- | ------------------ |\n| `change` |             | `InputEvent`       |\n| `input`  |             | `InputEvent`       |\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "chartData",
          "type": "{ [x: string]: any; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Data to be rendered in the chart.\nData field names must match the values you set in xFieldName and yFieldName",
          "docsTags": [],
          "values": [
            {
              "type": "{ [x: string]: any; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorFieldName",
          "type": "string",
          "mutable": false,
          "attr": "color-field-name",
          "reflectToAttr": false,
          "docs": "Type of category to plot in the chart",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "embedOptions",
          "type": "EmbedOptions<string, Renderers>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "EmbedOptions<string, Renderers>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "includeLegend",
          "type": "boolean",
          "mutable": false,
          "attr": "include-legend",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendPosition",
          "type": "\"bottom\" | \"bottom-left\" | \"bottom-right\" | \"left\" | \"none\" | \"right\" | \"top\" | \"top-left\" | \"top-right\"",
          "mutable": false,
          "attr": "legend-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-left",
              "type": "string"
            },
            {
              "value": "bottom-right",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "legendTitle",
          "type": "string",
          "mutable": false,
          "attr": "legend-title",
          "reflectToAttr": false,
          "docs": "Title to display above the optional legend",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "useShape",
          "type": "string",
          "mutable": false,
          "attr": "use-shape",
          "reflectToAttr": false,
          "docs": "The shape of the plotting in the chart - Square, Circle and Point",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xAxisTitle",
          "type": "string",
          "mutable": false,
          "attr": "x-axis-title",
          "reflectToAttr": false,
          "docs": "Title to display along the x-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xFieldName",
          "type": "string",
          "mutable": false,
          "attr": "x-field-name",
          "reflectToAttr": false,
          "docs": "Name for the data field to use to populate the chart's x-axis\ne.g. xFieldName of \"category\" will map any \"category\" fields in chartData to the x-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xTickLabelSlant",
          "type": "boolean",
          "mutable": false,
          "attr": "x-tick-label-slant",
          "reflectToAttr": false,
          "docs": "If true, then make Axis tick label 45 degrees",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "yAxisTitle",
          "type": "string",
          "mutable": false,
          "attr": "y-axis-title",
          "reflectToAttr": false,
          "docs": "Title to display along the y-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "yFieldName",
          "type": "string",
          "mutable": false,
          "attr": "y-field-name",
          "reflectToAttr": false,
          "docs": "Name for the data field to use to populate the chart's x-axis\ne.g. yFieldName of \"value\" will map any \"value\" fields in chartData to the y-axis",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-visualization-beta"],
      "dependencyGraph": {
        "gux-chart-scatter-plot-beta": ["gux-visualization-beta"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-color/components/gux-color-select/gux-color-select.tsx",
      "encapsulation": "none",
      "tag": "gux-color-select",
      "readme": "# gux-color-select\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input[type=\"color\"]"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "colorSelect",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for input[type=\"color\"]"
        }
      ],
      "parts": [],
      "dependents": ["gux-input-color"],
      "dependencies": ["gux-input-color-option"],
      "dependencyGraph": {
        "gux-color-select": ["gux-input-color-option"],
        "gux-input-color": ["gux-color-select"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-command-palette-legacy/gux-command-action/gux-command-action.tsx",
      "encapsulation": "none",
      "tag": "gux-command-action",
      "readme": "# gux-command-action\nAn action to display in the command palette. Actions can be recent, common or neither.\n\n## Adding a common action\n```xml\n    <gux-command-action text=\"Hello World\" common></gux-command-action>\n```\n\n## Adding a recent action\n```xml\n    <gux-command-action text=\"Hello World\" recent></gux-command-action>\n```\n\n## Adding a standard action\n```xml\n    <gux-command-action text=\"Hello World\"></gux-command-action>\n```\n",
      "docs": "An action to display in the command palette. Actions can be recent, common or neither.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "common",
          "type": "boolean",
          "mutable": false,
          "attr": "common",
          "reflectToAttr": false,
          "docs": "If the command is a common command. Common commands are choosen defaults a user might want to use.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "details",
          "type": "string",
          "mutable": false,
          "attr": "details",
          "reflectToAttr": false,
          "docs": "Details about the command. This acts as extra contextual information about the command.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "recent",
          "type": "boolean",
          "mutable": false,
          "attr": "recent",
          "reflectToAttr": false,
          "docs": "If the command is a recent command. Recent commands are commands that the user has recently issued.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shortcut",
          "type": "string",
          "mutable": false,
          "attr": "shortcut",
          "reflectToAttr": false,
          "docs": "The shortcut for the command. Textual representation of a shortcut associated with this command, if it exists.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The textual value of the command.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "press",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the list item is clicked, or enter/space is pressed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/legacy/gux-command-palette-legacy/gux-command-palette.tsx",
      "encapsulation": "none",
      "tag": "gux-command-palette-legacy",
      "readme": "# gux-command-palette-legacy\nA command palette. This control is used to display possible commands and allows for those commands to be triggered.\n",
      "docs": "A command palette. This control is used to display possible commands and allows for those commands to be triggered.",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the command palette.",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the command palette.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-input-search",
        "gux-list-legacy",
        "gux-list-item-legacy",
        "gux-text-highlight"
      ],
      "dependencyGraph": {
        "gux-command-palette-legacy": [
          "gux-input-search",
          "gux-list-legacy",
          "gux-list-item-legacy",
          "gux-text-highlight"
        ],
        "gux-input-search": ["gux-icon"],
        "gux-list-item-legacy": ["gux-text-highlight"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-content-search/gux-content-search.tsx",
      "encapsulation": "shadow",
      "tag": "gux-content-search",
      "readme": "# gux-content-search\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Required slot for input tag"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "currentMatch",
          "type": "number",
          "mutable": true,
          "attr": "current-match",
          "reflectToAttr": false,
          "docs": "The Current match count which needs to highlighted",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "matchCount",
          "type": "number",
          "mutable": true,
          "attr": "match-count",
          "reflectToAttr": false,
          "docs": "The Match Count",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clear",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "clear() => Promise<void>",
          "parameters": [],
          "docs": "Clears the input.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "guxcurrentmatchchanged",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when Current match value changes",
          "docsTags": [
            {
              "name": "return",
              "text": "The Current match value"
            }
          ]
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Required slot for input tag"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-content-search": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-copy-to-clipboard/gux-copy-to-clipboard.tsx",
      "encapsulation": "shadow",
      "tag": "gux-copy-to-clipboard-beta",
      "readme": "# gux-copy-to-clipboard-beta\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "focus",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon", "gux-tooltip"],
      "dependencyGraph": {
        "gux-copy-to-clipboard-beta": ["gux-icon", "gux-tooltip"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-listbox-multi/gux-create-option/gux-create-option.tsx",
      "encapsulation": "none",
      "tag": "gux-create-option",
      "readme": "# gux-create-option\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filtered",
          "type": "boolean",
          "mutable": false,
          "attr": "filtered",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxEmitInternalCreateNewOption",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxEmitInternalCreateNewOption() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "internalcreatenewoption",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-create-option": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-date/gux-date.tsx",
      "encapsulation": "shadow",
      "tag": "gux-date-beta",
      "readme": "# gux-date-beta\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "datetime",
          "type": "string",
          "mutable": false,
          "attr": "datetime",
          "reflectToAttr": false,
          "docs": "The ISO string representation of the date to format",
          "docsTags": [],
          "default": "new Date().toISOString()",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"full\" | \"long\" | \"medium\" | \"short\"",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Format option type",
          "docsTags": [],
          "default": "'short'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-date-time/gux-date-time.tsx",
      "encapsulation": "shadow",
      "tag": "gux-date-time-beta",
      "readme": "# gux-date-time-beta\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "datetime",
          "type": "string",
          "mutable": false,
          "attr": "datetime",
          "reflectToAttr": false,
          "docs": "The ISO string representation of the datetime to format",
          "docsTags": [],
          "default": "new Date().toISOString()",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"full\" | \"long\" | \"medium\" | \"short\"",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Format option type",
          "docsTags": [],
          "default": "'short'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-datepicker/gux-datepicker.tsx",
      "encapsulation": "shadow",
      "tag": "gux-datepicker",
      "readme": "# gux-datepicker\n\nThis is a datepicker component, that allows the user to select a date, or a range of date, depending on the component's `mode`.\n",
      "docs": "This is a datepicker component, that allows the user to select a date, or a range of date, depending on the component's `mode`.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable the input and prevent interactions.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "string",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "The datepicker date format (default to mm/dd/yyyy, or specified)",
          "docsTags": [],
          "default": "'mm/dd/yyyy'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The datepicker label (can be a single label, or two separated by a comma if it's a range datepicker)",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxDate",
          "type": "string",
          "mutable": false,
          "attr": "max-date",
          "reflectToAttr": false,
          "docs": "The max date selectable",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minDate",
          "type": "string",
          "mutable": false,
          "attr": "min-date",
          "reflectToAttr": false,
          "docs": "The min date selectable",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "CalendarModes.Range | CalendarModes.Single",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "The calendar mode (can be single or range)",
          "docsTags": [],
          "default": "CalendarModes.Single",
          "values": [
            {
              "type": "CalendarModes.Range"
            },
            {
              "type": "CalendarModes.Single"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberOfMonths",
          "type": "number",
          "mutable": true,
          "attr": "number-of-months",
          "reflectToAttr": false,
          "docs": "The datepicker number of months displayed",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The datepicker current value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "input",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when user selects a date",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon", "gux-calendar"],
      "dependencyGraph": {
        "gux-datepicker": ["gux-icon", "gux-calendar"],
        "gux-calendar": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-disclosure-button/gux-disclosure-button.tsx",
      "encapsulation": "shadow",
      "tag": "gux-disclosure-button",
      "readme": "# gux-disclosure-button\n\nThis is a UI button component that is used to open or dismiss an associated panel.\n",
      "docs": "This is a UI button component that is used to open or dismiss an associated panel.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "isOpen",
          "type": "boolean",
          "mutable": true,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "Used to open or close the disclosure panel",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Indicates the label for the disclosure button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Indicates the position of the button panel",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "active",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Return the state of the components panel on state change",
          "docsTags": [
            {
              "name": "return",
              "text": "the panel state"
            }
          ]
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-disclosure-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-dismiss-button/gux-dismiss-button.tsx",
      "encapsulation": "shadow",
      "tag": "gux-dismiss-button",
      "readme": "# gux-dismiss-button\n\nThis component is meant for use in other components as a dismiss button.\n",
      "docs": "This component is meant for use in other components as a dismiss button.",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gux-modal",
        "gux-notification-toast",
        "gux-popover",
        "gux-popover-list",
        "gux-simple-toast"
      ],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-dismiss-button": ["gux-icon"],
        "gux-modal": ["gux-dismiss-button"],
        "gux-notification-toast": ["gux-dismiss-button"],
        "gux-popover": ["gux-dismiss-button"],
        "gux-popover-list": ["gux-dismiss-button"],
        "gux-simple-toast": ["gux-dismiss-button"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-dropdown/gux-dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "gux-dropdown",
      "readme": "# gux-dropdown\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- for a gux-listbox containing gux-option children"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterable",
          "type": "boolean",
          "mutable": false,
          "attr": "filterable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasError",
          "type": "boolean",
          "mutable": false,
          "attr": "has-error",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxcollapsed",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "guxexpanded",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "guxfilter",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "internallistboxoptionsupdated",
          "capture": false,
          "passive": false
        },
        {
          "event": "blur",
          "capture": false,
          "passive": false
        },
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "internalexpanded",
          "capture": false,
          "passive": false
        },
        {
          "event": "internalcollapsed",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "for a gux-listbox containing gux-option children"
        }
      ],
      "parts": [],
      "dependents": [
        "gux-pagination-items-per-page",
        "gux-pagination-items-per-page-beta"
      ],
      "dependencies": ["gux-icon", "gux-radial-loading", "gux-popup"],
      "dependencyGraph": {
        "gux-dropdown": ["gux-icon", "gux-radial-loading", "gux-popup"],
        "gux-pagination-items-per-page": ["gux-dropdown"],
        "gux-pagination-items-per-page-beta": ["gux-dropdown"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-dropdown-legacy/gux-dropdown.tsx",
      "encapsulation": "none",
      "tag": "gux-dropdown-legacy",
      "readme": "# gux-dropdown-legacy\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable the input and prevent interactions.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterable",
          "type": "boolean",
          "mutable": false,
          "attr": "filterable",
          "reflectToAttr": false,
          "docs": "Whether the user can filter or not.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"default\" | \"page\" | \"palette\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "Sets the select mode (default, page or palette).",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "page",
              "type": "string"
            },
            {
              "value": "palette",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The dropdown placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Indicate the dropdown input value",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setLabeledBy",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setLabeledBy(id: string) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setSelected() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "change",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when selection is changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-input-text-like", "gux-icon"],
      "dependencyGraph": {
        "gux-dropdown-legacy": ["gux-input-text-like", "gux-icon"],
        "gux-input-text-like": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-dropdown-multi/gux-dropdown-multi.tsx",
      "encapsulation": "shadow",
      "tag": "gux-dropdown-multi-beta",
      "readme": "# gux-dropdown-multi\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- for a gux-listbox-multi containing gux-option-multi children"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterable",
          "type": "boolean",
          "mutable": false,
          "attr": "filterable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasError",
          "type": "boolean",
          "mutable": false,
          "attr": "has-error",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedValues",
          "returns": {
            "type": "Promise<string[]>",
            "docs": ""
          },
          "signature": "getSelectedValues() => Promise<string[]>",
          "parameters": [],
          "docs": "Returns an array of the selected values",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "guxcollapsed",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "This event will run when the dropdown-multi transitions to a collapsed state.",
          "docsTags": []
        },
        {
          "event": "guxcreateoption",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "This event is emitted to request creating a new option",
          "docsTags": []
        },
        {
          "event": "guxexpanded",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "This event will run when the dropdown-multi transitions to an expanded state.",
          "docsTags": []
        },
        {
          "event": "guxfilter",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "internalexpanded",
          "capture": false,
          "passive": false
        },
        {
          "event": "internalcollapsed",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "internallistboxoptionsupdated",
          "capture": false,
          "passive": false
        },
        {
          "event": "internalclearselected",
          "capture": false,
          "passive": false
        },
        {
          "event": "internalcreatenewoption",
          "capture": false,
          "passive": false
        },
        {
          "event": "blur",
          "capture": false,
          "passive": false
        },
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "for a gux-listbox-multi containing gux-option-multi children"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-dropdown-multi-tag",
        "gux-icon",
        "gux-radial-loading",
        "gux-popup"
      ],
      "dependencyGraph": {
        "gux-dropdown-multi-beta": [
          "gux-dropdown-multi-tag",
          "gux-icon",
          "gux-radial-loading",
          "gux-popup"
        ],
        "gux-dropdown-multi-tag": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-dropdown-multi/gux-dropdown-multi-tag/gux-dropdown-multi-tag.tsx",
      "encapsulation": "shadow",
      "tag": "gux-dropdown-multi-tag",
      "readme": "# gux-dropdown-multi-tag\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Tag is removable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberSelected",
          "type": "number",
          "mutable": false,
          "attr": "number-selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internalclearselected",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when click on remove button",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-dropdown-multi-beta"],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-dropdown-multi-tag": ["gux-icon"],
        "gux-dropdown-multi-beta": ["gux-dropdown-multi-tag"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-advanced-dropdown/dropdown-option/gux-dropdown-option.tsx",
      "encapsulation": "none",
      "tag": "gux-dropdown-option",
      "readme": "# gux-dropdown-option\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If this Boolean attribute is set, this option is not checkable. It won't receive any\nbrowsing events, like mouse clicks or focus-related ones.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filtered",
          "type": "boolean",
          "mutable": true,
          "attr": "filtered",
          "reflectToAttr": true,
          "docs": "If this Boolean attribute is set, the option is not visible to the select control.\nThis does not mean that it clears the selection if it was previously selected.\n\nShould only be used by internal users.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "If present, this Boolean attribute indicates that the option is currently selected.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The content of this attribute represents the value to be submitted on 'input' changes,\nshould this option be selected. If this attribute is omitted, the value is taken from\nthe text content of the option element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getDisplayedValue",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "signature": "getDisplayedValue() => Promise<string>",
          "parameters": [],
          "docs": "Gets the value rendered by the drop down item.",
          "docsTags": []
        },
        {
          "name": "shouldFilter",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "shouldFilter(searchInput: string) => Promise<boolean>",
          "parameters": [],
          "docs": "Determines if the search input matches this option.",
          "docsTags": [
            {
              "name": "param",
              "text": "searchInput The input string being searched for."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "selectedChanged",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Occurs when the item has been selected.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-error-message-beta/gux-error-message-beta.tsx",
      "encapsulation": "shadow",
      "tag": "gux-error-message-beta",
      "readme": "# gux-input\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "error(default) - Required slot for error"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error(default)",
          "docs": "Required slot for error"
        }
      ],
      "parts": [],
      "dependents": ["gux-form-field-legacy", "gux-toggle"],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-error-message-beta": ["gux-icon"],
        "gux-form-field-legacy": ["gux-error-message-beta"],
        "gux-toggle": ["gux-error-message-beta"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-flyout-menu/gux-flyout-menu.tsx",
      "encapsulation": "shadow",
      "tag": "gux-flyout-menu-beta",
      "readme": "# gux-flyout-menu\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-checkbox/gux-form-field-checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-checkbox",
      "readme": "# gux-form-field-checkbox\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": ["gux-all-row-select", "gux-row-select"],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-form-field-checkbox": ["gux-icon"],
        "gux-all-row-select": ["gux-form-field-checkbox"],
        "gux-row-select": ["gux-form-field-checkbox"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-color/gux-form-field-color.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-color",
      "readme": "# gux-form-field-color\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-form-field-color": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-dropdown/gux-form-field-dropdown.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-dropdown",
      "readme": "# gux-form-field-select\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-form-field-dropdown": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/helper-components/gux-form-field-input-clear-button/gux-form-field-input-clear-button.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-input-clear-button",
      "readme": "# gux-form-field-input-clear-button\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gux-form-field-number",
        "gux-form-field-search",
        "gux-form-field-text-like"
      ],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-form-field-input-clear-button": ["gux-icon"],
        "gux-form-field-number": ["gux-form-field-input-clear-button"],
        "gux-form-field-search": ["gux-form-field-input-clear-button"],
        "gux-form-field-text-like": ["gux-form-field-input-clear-button"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/gux-form-field.tsx",
      "encapsulation": "none",
      "tag": "gux-form-field-legacy",
      "readme": "# gux-input\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayUnits",
          "type": "string",
          "mutable": false,
          "attr": "display-units",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resize",
          "type": "\"auto\" | \"manual\" | \"none\"",
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "manual",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valueInTooltip",
          "type": "boolean",
          "mutable": false,
          "attr": "value-in-tooltip",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-input-checkbox",
        "gux-input-radio",
        "gux-input-color",
        "gux-input-range",
        "gux-input-number",
        "gux-input-select",
        "gux-input-text-like",
        "gux-input-search",
        "gux-input-textarea",
        "gux-error-message-beta"
      ],
      "dependencyGraph": {
        "gux-form-field-legacy": [
          "gux-input-checkbox",
          "gux-input-radio",
          "gux-input-color",
          "gux-input-range",
          "gux-input-number",
          "gux-input-select",
          "gux-input-text-like",
          "gux-input-search",
          "gux-input-textarea",
          "gux-error-message-beta"
        ],
        "gux-input-color": ["gux-icon", "gux-color-select"],
        "gux-color-select": ["gux-input-color-option"],
        "gux-input-number": ["gux-icon"],
        "gux-input-select": ["gux-icon"],
        "gux-input-text-like": ["gux-icon"],
        "gux-input-search": ["gux-icon"],
        "gux-error-message-beta": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-number/gux-form-field-number.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-number",
      "readme": "# gux-form-field-number\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        },
        {
          "name": "part",
          "text": "input-section - Style input container"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxForceUpdate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxForceUpdate() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [
        {
          "name": "input-section",
          "docs": "Style input container"
        }
      ],
      "dependents": [],
      "dependencies": ["gux-form-field-input-clear-button", "gux-icon"],
      "dependencyGraph": {
        "gux-form-field-number": [
          "gux-form-field-input-clear-button",
          "gux-icon"
        ],
        "gux-form-field-input-clear-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-radio/gux-form-field-radio.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-radio",
      "readme": "# gux-form-field-radio\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-form-field-radio": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-range/gux-form-field-range.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-range",
      "readme": "# gux-form-field-range\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "displayUnits",
          "type": "string",
          "mutable": false,
          "attr": "display-units",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valueInTooltip",
          "type": "boolean",
          "mutable": false,
          "attr": "value-in-tooltip",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "input",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "mouseup",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-form-field-range": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-search/gux-form-field-search.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-search",
      "readme": "# gux-form-field-search\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxForceUpdate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxForceUpdate() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": ["gux-advanced-dropdown"],
      "dependencies": ["gux-icon", "gux-form-field-input-clear-button"],
      "dependencyGraph": {
        "gux-form-field-search": [
          "gux-icon",
          "gux-form-field-input-clear-button"
        ],
        "gux-form-field-input-clear-button": ["gux-icon"],
        "gux-advanced-dropdown": ["gux-form-field-search"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-select/gux-form-field-select.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-select",
      "readme": "# gux-form-field-select\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-form-field-select": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-text-like/gux-form-field-text-like.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-text-like",
      "readme": "# gux-form-field-text-like\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "prefix - Optional slot for prefix"
        },
        {
          "name": "slot",
          "text": "suffix - Optional slot for suffix"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxForceUpdate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxForceUpdate() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        },
        {
          "name": "prefix",
          "docs": "Optional slot for prefix"
        },
        {
          "name": "suffix",
          "docs": "Optional slot for suffix"
        }
      ],
      "parts": [],
      "dependents": ["gux-pagination-buttons"],
      "dependencies": ["gux-form-field-input-clear-button", "gux-icon"],
      "dependencyGraph": {
        "gux-form-field-text-like": [
          "gux-form-field-input-clear-button",
          "gux-icon"
        ],
        "gux-form-field-input-clear-button": ["gux-icon"],
        "gux-pagination-buttons": ["gux-form-field-text-like"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-textarea/gux-form-field-textarea.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-textarea",
      "readme": "# gux-form-field-textarea\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resize",
          "type": "\"auto\" | \"manual\" | \"none\"",
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "manual",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "input",
          "docs": "Required slot for input tag"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-form-field-textarea": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-form-field/components/gux-form-field-time-picker/gux-form-field-time-picker.tsx",
      "encapsulation": "shadow",
      "tag": "gux-form-field-time-picker",
      "readme": "# gux-form-field-time-picker\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "Required slot for gux-time-picker-beta tag"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label tag"
        },
        {
          "name": "slot",
          "text": "error - Optional slot for error message"
        },
        {
          "name": "slot",
          "text": "help - Optional slot for help message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "labelPosition",
          "type": "\"above\" | \"beside\" | \"screenreader\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            },
            {
              "value": "screenreader",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "Required slot for gux-time-picker-beta tag",
          "docs": ""
        },
        {
          "name": "error",
          "docs": "Optional slot for error message"
        },
        {
          "name": "help",
          "docs": "Optional slot for help message"
        },
        {
          "name": "label",
          "docs": "Required slot for label tag"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-screen-reader-beta", "gux-icon"],
      "dependencyGraph": {
        "gux-form-field-time-picker": ["gux-screen-reader-beta", "gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-icon/gux-icon.tsx",
      "encapsulation": "shadow",
      "tag": "gux-icon",
      "readme": "# gux-icon\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "decorative",
          "type": "boolean",
          "mutable": false,
          "attr": "decorative",
          "reflectToAttr": false,
          "docs": "Indicate whether the icon should be ignored by accessibility tools or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconName",
          "type": "string",
          "mutable": false,
          "attr": "icon-name",
          "reflectToAttr": false,
          "docs": "Indicate which icon to display",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "screenreaderText",
          "type": "string",
          "mutable": false,
          "attr": "screenreader-text",
          "reflectToAttr": false,
          "docs": "Localized text describing the intent of this icon (not required if `decorative=true`)",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gux-accordion-legacy",
        "gux-accordion-section",
        "gux-action-button",
        "gux-action-button-legacy",
        "gux-advanced-dropdown",
        "gux-breadcrumb-item",
        "gux-button-multi",
        "gux-button-multi-legacy",
        "gux-calendar",
        "gux-content-search",
        "gux-copy-to-clipboard-beta",
        "gux-create-option",
        "gux-datepicker",
        "gux-disclosure-button",
        "gux-dismiss-button",
        "gux-dropdown",
        "gux-dropdown-legacy",
        "gux-dropdown-multi-beta",
        "gux-dropdown-multi-tag",
        "gux-error-message-beta",
        "gux-form-field-checkbox",
        "gux-form-field-color",
        "gux-form-field-dropdown",
        "gux-form-field-input-clear-button",
        "gux-form-field-number",
        "gux-form-field-radio",
        "gux-form-field-range",
        "gux-form-field-search",
        "gux-form-field-select",
        "gux-form-field-text-like",
        "gux-form-field-textarea",
        "gux-form-field-time-picker",
        "gux-inline-alert-beta",
        "gux-input-color",
        "gux-input-number",
        "gux-input-search",
        "gux-input-select",
        "gux-input-text-like",
        "gux-month-calendar",
        "gux-month-picker-beta",
        "gux-pagination-buttons",
        "gux-pagination-buttons-beta",
        "gux-pagination-cursor",
        "gux-rating",
        "gux-side-panel-button",
        "gux-sort-control",
        "gux-submenu",
        "gux-tab-advanced",
        "gux-tab-advanced-list",
        "gux-tab-dropdown-option-legacy",
        "gux-tab-legacy",
        "gux-tab-list",
        "gux-table-beta",
        "gux-table-select-menu",
        "gux-tabs-legacy",
        "gux-tag-beta",
        "gux-time-picker-beta",
        "gux-toggle-slider"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gux-accordion-legacy": ["gux-icon"],
        "gux-accordion-section": ["gux-icon"],
        "gux-action-button": ["gux-icon"],
        "gux-action-button-legacy": ["gux-icon"],
        "gux-advanced-dropdown": ["gux-icon"],
        "gux-breadcrumb-item": ["gux-icon"],
        "gux-button-multi": ["gux-icon"],
        "gux-button-multi-legacy": ["gux-icon"],
        "gux-calendar": ["gux-icon"],
        "gux-content-search": ["gux-icon"],
        "gux-copy-to-clipboard-beta": ["gux-icon"],
        "gux-create-option": ["gux-icon"],
        "gux-datepicker": ["gux-icon"],
        "gux-disclosure-button": ["gux-icon"],
        "gux-dismiss-button": ["gux-icon"],
        "gux-dropdown": ["gux-icon"],
        "gux-dropdown-legacy": ["gux-icon"],
        "gux-dropdown-multi-beta": ["gux-icon"],
        "gux-dropdown-multi-tag": ["gux-icon"],
        "gux-error-message-beta": ["gux-icon"],
        "gux-form-field-checkbox": ["gux-icon"],
        "gux-form-field-color": ["gux-icon"],
        "gux-form-field-dropdown": ["gux-icon"],
        "gux-form-field-input-clear-button": ["gux-icon"],
        "gux-form-field-number": ["gux-icon"],
        "gux-form-field-radio": ["gux-icon"],
        "gux-form-field-range": ["gux-icon"],
        "gux-form-field-search": ["gux-icon"],
        "gux-form-field-select": ["gux-icon"],
        "gux-form-field-text-like": ["gux-icon"],
        "gux-form-field-textarea": ["gux-icon"],
        "gux-form-field-time-picker": ["gux-icon"],
        "gux-inline-alert-beta": ["gux-icon"],
        "gux-input-color": ["gux-icon"],
        "gux-input-number": ["gux-icon"],
        "gux-input-search": ["gux-icon"],
        "gux-input-select": ["gux-icon"],
        "gux-input-text-like": ["gux-icon"],
        "gux-month-calendar": ["gux-icon"],
        "gux-month-picker-beta": ["gux-icon"],
        "gux-pagination-buttons": ["gux-icon"],
        "gux-pagination-buttons-beta": ["gux-icon"],
        "gux-pagination-cursor": ["gux-icon"],
        "gux-rating": ["gux-icon"],
        "gux-side-panel-button": ["gux-icon"],
        "gux-sort-control": ["gux-icon"],
        "gux-submenu": ["gux-icon"],
        "gux-tab-advanced": ["gux-icon"],
        "gux-tab-advanced-list": ["gux-icon"],
        "gux-tab-dropdown-option-legacy": ["gux-icon"],
        "gux-tab-legacy": ["gux-icon"],
        "gux-tab-list": ["gux-icon"],
        "gux-table-beta": ["gux-icon"],
        "gux-table-select-menu": ["gux-icon"],
        "gux-tabs-legacy": ["gux-icon"],
        "gux-tag-beta": ["gux-icon"],
        "gux-time-picker-beta": ["gux-icon"],
        "gux-toggle-slider": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-alert/gux-inline-alert.tsx",
      "encapsulation": "shadow",
      "tag": "gux-inline-alert-beta",
      "readme": "# gux-alert-beta\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Slot for message."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Slot for message."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon", "gux-tooltip-title"],
      "dependencyGraph": {
        "gux-inline-alert-beta": ["gux-icon", "gux-tooltip-title"],
        "gux-tooltip-title": ["gux-tooltip"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-checkbox/gux-input-checkbox.tsx",
      "encapsulation": "none",
      "tag": "gux-input-checkbox",
      "readme": "# gux-input-checkbox\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input[type=\"checkbox\"]"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for input[type=\"checkbox\"]"
        },
        {
          "name": "label",
          "docs": "Required slot for label"
        }
      ],
      "parts": [],
      "dependents": ["gux-form-field-legacy"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-form-field-legacy": ["gux-input-checkbox"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-color/gux-input-color.tsx",
      "encapsulation": "none",
      "tag": "gux-input-color",
      "readme": "# gux-input-color\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input[type=\"color\"]"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "guxErrorDescribedby",
          "type": "string",
          "mutable": false,
          "attr": "gux-error-describedby",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "guxLabelDescribedby",
          "type": "string",
          "mutable": false,
          "attr": "gux-label-describedby",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "guxRequired",
          "type": "boolean",
          "mutable": false,
          "attr": "gux-required",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "input",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for input[type=\"color\"]"
        }
      ],
      "parts": [],
      "dependents": ["gux-form-field-legacy"],
      "dependencies": ["gux-icon", "gux-color-select"],
      "dependencyGraph": {
        "gux-input-color": ["gux-icon", "gux-color-select"],
        "gux-color-select": ["gux-input-color-option"],
        "gux-form-field-legacy": ["gux-input-color"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-color/components/gux-input-color-option/gux-input-color-option.tsx",
      "encapsulation": "none",
      "tag": "gux-input-color-option",
      "readme": "# gux-input-color-option\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "Indicate if the tile is active",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Indicate the color of the tile, if undefined, tile will be blank and be disabled",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "colorSelect",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a color is selected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-color-select"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-color-select": ["gux-input-color-option"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-number/gux-input-number.tsx",
      "encapsulation": "none",
      "tag": "gux-input-number",
      "readme": "# gux-input-number\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input[type=\"radio\"]"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for input[type=\"radio\"]"
        }
      ],
      "parts": [],
      "dependents": ["gux-form-field-legacy"],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-input-number": ["gux-icon"],
        "gux-form-field-legacy": ["gux-input-number"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-radio/gux-input-radio.tsx",
      "encapsulation": "none",
      "tag": "gux-input-radio",
      "readme": "# gux-input-radio\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input[type=\"radio\"]"
        },
        {
          "name": "slot",
          "text": "label - Required slot for label"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for input[type=\"radio\"]"
        },
        {
          "name": "label",
          "docs": "Required slot for label"
        }
      ],
      "parts": [],
      "dependents": ["gux-form-field-legacy"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-form-field-legacy": ["gux-input-radio"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-range/gux-input-range.tsx",
      "encapsulation": "none",
      "tag": "gux-input-range",
      "readme": "# gux-range\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input[type=\"range\"]"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "displayUnits",
          "type": "string",
          "mutable": false,
          "attr": "display-units",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valueInTooltip",
          "type": "boolean",
          "mutable": false,
          "attr": "value-in-tooltip",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "input",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "mouseup",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for input[type=\"range\"]"
        }
      ],
      "parts": [],
      "dependents": ["gux-form-field-legacy"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-form-field-legacy": ["gux-input-range"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-search/gux-input-search.tsx",
      "encapsulation": "none",
      "tag": "gux-input-search",
      "readme": "# gux-search-input\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - slot for input[type=\"search\"]"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "slot for input[type=\"search\"]"
        }
      ],
      "parts": [],
      "dependents": ["gux-command-palette-legacy", "gux-form-field-legacy"],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-input-search": ["gux-icon"],
        "gux-command-palette-legacy": ["gux-input-search"],
        "gux-form-field-legacy": ["gux-input-search"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-select/gux-input-select.tsx",
      "encapsulation": "none",
      "tag": "gux-input-select",
      "readme": "# gux-input-select\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for select element"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for select element"
        }
      ],
      "parts": [],
      "dependents": ["gux-form-field-legacy"],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-input-select": ["gux-icon"],
        "gux-form-field-legacy": ["gux-input-select"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-text-like/gux-input-text-like.tsx",
      "encapsulation": "none",
      "tag": "gux-input-text-like",
      "readme": "# gux-input-text-like\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for input[type=\"text\" | type=\"email\" | type=\"password\"]"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "clearable",
          "type": "boolean",
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for input[type=\"text\" | type=\"email\" | type=\"password\"]"
        }
      ],
      "parts": [],
      "dependents": ["gux-dropdown-legacy", "gux-form-field-legacy"],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-input-text-like": ["gux-icon"],
        "gux-dropdown-legacy": ["gux-input-text-like"],
        "gux-form-field-legacy": ["gux-input-text-like"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-form-field-legacy/components/gux-input-textarea/gux-input-textarea.tsx",
      "encapsulation": "none",
      "tag": "gux-input-textarea",
      "readme": "# gux-input-textarea\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "input - Required slot for textarea"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "resize",
          "type": "\"auto\" | \"manual\" | \"none\"",
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "manual",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "input",
          "docs": "Required slot for textarea"
        }
      ],
      "parts": [],
      "dependents": ["gux-form-field-legacy"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-form-field-legacy": ["gux-input-textarea"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-list/gux-list.tsx",
      "encapsulation": "shadow",
      "tag": "gux-list",
      "readme": "# gux-list\n\nA list element. In order to use this element list contents must be slotted in.\n\nExample usage\n\n```html\n<gux-action-list>\n  <gux-action-list-item value=\"test\" text=\"test1\" />\n  <gux-action-list-divider />\n  <gux-action-list-item value=\"test\" text=\"test2\" />\n  <gux-action-list-item value=\"test\" text=\"test3\" />\n</gux-action-list>\n```\n\nExample with slotting\n\n```html\n<gux-action-list>\n  <gux-action-list-item\n    ><span>⌘</span><gux-text-highlight text=\"test\"\n  /></gux-action-list-item>\n</gux-action-list>\n```\n",
      "docs": "A list element. In order to use this element list contents must be slotted in.\n\nExample usage\n\n```html\n<gux-action-list>\n  <gux-action-list-item value=\"test\" text=\"test1\" />\n  <gux-action-list-divider />\n  <gux-action-list-item value=\"test\" text=\"test2\" />\n  <gux-action-list-item value=\"test\" text=\"test3\" />\n</gux-action-list>\n```\n\nExample with slotting\n\n```html\n<gux-action-list>\n  <gux-action-list-item\n    ><span>⌘</span><gux-text-highlight text=\"test\"\n  /></gux-action-list-item>\n</gux-action-list>\n```",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "guxFocusFirstItem",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxFocusFirstItem() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gux-action-button",
        "gux-button-multi",
        "gux-time-picker-beta"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gux-action-button": ["gux-list"],
        "gux-button-multi": ["gux-list"],
        "gux-time-picker-beta": ["gux-list"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-list/gux-list-divider/gux-list-divider.tsx",
      "encapsulation": "shadow",
      "tag": "gux-list-divider",
      "readme": "# gux-action-list-divider\nA divider to display in an action list.\n\n",
      "docs": "A divider to display in an action list.",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/legacy/gux-list-legacy/list-divider/gux-list-divider.tsx",
      "encapsulation": "shadow",
      "tag": "gux-list-divider-legacy",
      "readme": "# gux-list-divider\nA divider to display in a list.\n\n",
      "docs": "A divider to display in a list.",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-list/gux-list-item/gux-list-item.tsx",
      "encapsulation": "shadow",
      "tag": "gux-list-item",
      "readme": "# gux-list-item\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "mouseup",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseover",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-time-picker-beta"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-time-picker-beta": ["gux-list-item"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-list-legacy/list-item/gux-list-item.tsx",
      "encapsulation": "shadow",
      "tag": "gux-list-item-legacy",
      "readme": "# gux-list-item\n\nA list item to display in a list. The content of this can either be slotted in or driven by the text attribute.\n\nExample of a standard list item\n\n```html\n<gux-list-item text=\"Hello World\" value=\"hw\" />\n```\n\nExample of a custom list item with highlighting\n\n```html\n<gux-list-item value=\"hw\"\n  ><i>Testing</i><gux-text-highlight text=\"Hello World\"\n/></gux-list-item>\n```\n",
      "docs": "A list item to display in a list. The content of this can either be slotted in or driven by the text attribute.\n\nExample of a standard list item\n\n```html\n<gux-list-item text=\"Hello World\" value=\"hw\" />\n```\n\nExample of a custom list item with highlighting\n\n```html\n<gux-list-item value=\"hw\"\n  ><i>Testing</i><gux-text-highlight text=\"Hello World\"\n/></gux-list-item>\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "strategy",
          "type": "\"contains\" | \"fuzzy\" | \"start\"",
          "mutable": false,
          "attr": "strategy",
          "reflectToAttr": false,
          "docs": "How the item should be highlighted.",
          "docsTags": [],
          "values": [
            {
              "value": "contains",
              "type": "string"
            },
            {
              "value": "fuzzy",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The value to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value associated with this item.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "press",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the list item is clicked, or enter/space is pressed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-command-palette-legacy"],
      "dependencies": ["gux-text-highlight"],
      "dependencyGraph": {
        "gux-list-item-legacy": ["gux-text-highlight"],
        "gux-command-palette-legacy": ["gux-list-item-legacy"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-list-legacy/gux-list.tsx",
      "encapsulation": "shadow",
      "tag": "gux-list-legacy",
      "readme": "# gux-list-legacy\n\nA list element. In order to use this element list contents must be slotted in.\n\nExample usage\n\n```html\n<gux-list-legacy>\n  <gux-list-item-legacy value=\"test\" text=\"test1\" />\n  <gux-list-divider-legacy />\n  <gux-list-item-legacy value=\"test\" text=\"test2\" />\n  <gux-list-ite-legacym value=\"test\" text=\"test3\" />\n</gux-list-legacy>\n```\n\nExample with slotting\n\n```html\n<gux-list-legacy>\n  <gux-list-item-legacy\n    ><span>⌘</span><gux-text-highlight text=\"test\"\n  /></gux-list-item-legacy>\n</gux-list-legacy>\n```\n",
      "docs": "A list element. In order to use this element list contents must be slotted in.\n\nExample usage\n\n```html\n<gux-list-legacy>\n  <gux-list-item-legacy value=\"test\" text=\"test1\" />\n  <gux-list-divider-legacy />\n  <gux-list-item-legacy value=\"test\" text=\"test2\" />\n  <gux-list-ite-legacym value=\"test\" text=\"test3\" />\n</gux-list-legacy>\n```\n\nExample with slotting\n\n```html\n<gux-list-legacy>\n  <gux-list-item-legacy\n    ><span>⌘</span><gux-text-highlight text=\"test\"\n  /></gux-list-item-legacy>\n</gux-list-legacy>\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "highlight",
          "type": "string",
          "mutable": false,
          "attr": "highlight",
          "reflectToAttr": false,
          "docs": "The highlight value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "unknown",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The current selection in the list.",
          "docsTags": [],
          "values": [
            {
              "type": "unknown"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "isFirstItemSelected",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "isFirstItemSelected() => Promise<boolean>",
          "parameters": [],
          "docs": "Returns whether the first item in the list is selected.",
          "docsTags": []
        },
        {
          "name": "isLastItemSelected",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "isLastItemSelected() => Promise<boolean>",
          "parameters": [],
          "docs": "Returns whether the last item in the list is selected.",
          "docsTags": []
        },
        {
          "name": "setFocusOnFirstItem",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocusOnFirstItem() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocusOnLastItem",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocusOnLastItem() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "changed",
          "detail": "unknown",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the list's selection is changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "selected",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-command-palette-legacy"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-command-palette-legacy": ["gux-list-legacy"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-listbox/gux-listbox.tsx",
      "encapsulation": "shadow",
      "tag": "gux-listbox",
      "readme": "# gux-listbox\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- collection of gux-option elements"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "filter",
          "type": "string",
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxSelectActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxSelectActive() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "internallistboxoptionsupdated",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "blur",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "mousemove",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "collection of gux-option elements"
        }
      ],
      "parts": [],
      "dependents": [
        "gux-pagination-items-per-page",
        "gux-pagination-items-per-page-beta"
      ],
      "dependencies": ["gux-radial-loading"],
      "dependencyGraph": {
        "gux-listbox": ["gux-radial-loading"],
        "gux-pagination-items-per-page": ["gux-listbox"],
        "gux-pagination-items-per-page-beta": ["gux-listbox"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-listbox-multi/gux-listbox-multi.tsx",
      "encapsulation": "shadow",
      "tag": "gux-listbox-multi",
      "readme": "# gux-listbox-multi\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- collection of gux-option-multi elements"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "filter",
          "type": "string",
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasExactMatch",
          "type": "boolean",
          "mutable": true,
          "attr": "has-exact-match",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textInput",
          "type": "string",
          "mutable": false,
          "attr": "text-input",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxSelectActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxSelectActive() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "internallistboxoptionsupdated",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "blur",
          "capture": false,
          "passive": false
        },
        {
          "event": "internalselectcustomoption",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "mousemove",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "collection of gux-option-multi elements"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-radial-loading"],
      "dependencyGraph": {
        "gux-listbox-multi": ["gux-radial-loading"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-loading-message/gux-loading-message.tsx",
      "encapsulation": "shadow",
      "tag": "gux-loading-message-beta",
      "readme": "# gux-loading-message-beta\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "progress - Required slot for progress."
        },
        {
          "name": "slot",
          "text": "primary-guidance - Required slot for primary guidance."
        },
        {
          "name": "slot",
          "text": "additional-guidance - Slot for additional guidance."
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "additional-guidance",
          "docs": "Slot for additional guidance."
        },
        {
          "name": "primary-guidance",
          "docs": "Required slot for primary guidance."
        },
        {
          "name": "progress",
          "docs": "Required slot for progress."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-flyout-menu/gux-menu/gux-menu.tsx",
      "encapsulation": "none",
      "tag": "gux-menu",
      "readme": "# gux-flyout-menu\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-flyout-menu/gux-menu/gux-menu-option/gux-menu-option.tsx",
      "encapsulation": "none",
      "tag": "gux-menu-option",
      "readme": "# gux-flyout-menu\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "guxFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxFocus() => Promise<void>",
          "parameters": [],
          "docs": "Focus on the components button element",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-modal/gux-modal.tsx",
      "encapsulation": "shadow",
      "tag": "gux-modal",
      "readme": "# genesys-modal\n\nThis default behaviour of this componet assumes that `gux-modal` components will be added to the DOM when they are need and then removed from the DOM after the user interacts with them. For this reason the default behaviour of the guxdismiss event is to remove the element from the DOM. The removal of the element from the DOM should be implemented by client apps on the clicking of all buttons too. If you want your app to not add and remove a new `gux-modal` component for each interaction you can override the default behaviour by listening for the `guxdismiss` custom event and preventing the default behaviour which removes the component from the DOM.\n",
      "docs": "This default behaviour of this componet assumes that `gux-modal` components will be added to the DOM when they are need and then removed from the DOM after the user interacts with them. For this reason the default behaviour of the guxdismiss event is to remove the element from the DOM. The removal of the element from the DOM should be implemented by client apps on the clicking of all buttons too. If you want your app to not add and remove a new `gux-modal` component for each interaction you can override the default behaviour by listening for the `guxdismiss` custom event and preventing the default behaviour which removes the component from the DOM.",
      "docsTags": [
        {
          "name": "slot",
          "text": "content - Required slot for the modal content"
        },
        {
          "name": "slot",
          "text": "left-align-buttons - Optional slot to set gux-buttons aligned to the left of the modal"
        },
        {
          "name": "slot",
          "text": "right-align-buttons - Optional slot to set gux-buttons aligned to the left of the modal"
        },
        {
          "name": "slot",
          "text": "title - Optional slot to set the modal title"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "initialFocus",
          "type": "string",
          "mutable": false,
          "attr": "initial-focus",
          "reflectToAttr": false,
          "docs": "Query selector for the element to initially focus when the modal opens\nDefaults to the first tabbable element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"dynamic\" | \"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Indicates the size of the modal (small, medium or large)",
          "docsTags": [],
          "default": "'dynamic'",
          "values": [
            {
              "value": "dynamic",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trapFocus",
          "type": "boolean",
          "mutable": false,
          "attr": "trap-focus",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxdismiss",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when a user dismisses the modal (The default behaviour is to remove the component from the DOM)",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "content",
          "docs": "Required slot for the modal content"
        },
        {
          "name": "left-align-buttons",
          "docs": "Optional slot to set gux-buttons aligned to the left of the modal"
        },
        {
          "name": "right-align-buttons",
          "docs": "Optional slot to set gux-buttons aligned to the left of the modal"
        },
        {
          "name": "title",
          "docs": "Optional slot to set the modal title"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-dismiss-button"],
      "dependencyGraph": {
        "gux-modal": ["gux-dismiss-button"],
        "gux-dismiss-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-month-picker/gux-month-calendar/gux-month-calendar.tsx",
      "encapsulation": "shadow",
      "tag": "gux-month-calendar",
      "readme": "# gux-month-calendar\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "max",
          "type": "`${string}-${string}`",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The max year and month selectable in ISO8601 format (yyyy-mm)",
          "docsTags": [],
          "values": [
            {
              "type": "`${string}-${string}`"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "`${string}-${string}`",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The min year and month selectable in ISO8601 format (yyyy-mm)",
          "docsTags": [],
          "values": [
            {
              "type": "`${string}-${string}`"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "`${string}-${string}`",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The current selected year and month in ISO8601 format (yyyy-mm)",
          "docsTags": [],
          "values": [
            {
              "type": "`${string}-${string}`"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxFocus(iSOYearMonth: GuxISOYearMonth) => Promise<void>",
          "parameters": [],
          "docs": "Focus a month",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-month-picker-beta"],
      "dependencies": ["gux-icon", "gux-month-list-item", "gux-month-list"],
      "dependencyGraph": {
        "gux-month-calendar": [
          "gux-icon",
          "gux-month-list-item",
          "gux-month-list"
        ],
        "gux-month-picker-beta": ["gux-month-calendar"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-month-picker/gux-month-calendar/gux-month-list/gux-month-list.tsx",
      "encapsulation": "shadow",
      "tag": "gux-month-list",
      "readme": "# gux-month-list\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "guxFocusFirstItem",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxFocusFirstItem() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-month-calendar"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-month-calendar": ["gux-month-list"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-month-picker/gux-month-calendar/gux-month-list/gux-month-list-item/gux-month-list-item.tsx",
      "encapsulation": "shadow",
      "tag": "gux-month-list-item",
      "readme": "# gux-month-list-item\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "`${string}-${string}`",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "`${string}-${string}`"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "mouseup",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseover",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-month-calendar"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-month-calendar": ["gux-month-list-item"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-month-picker/gux-month-picker.tsx",
      "encapsulation": "shadow",
      "tag": "gux-month-picker-beta",
      "readme": "# gux-month-picker\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "`${string}-${string}`",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The max year and month selectable in ISO8601 format (yyyy-mm)",
          "docsTags": [],
          "values": [
            {
              "type": "`${string}-${string}`"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "`${string}-${string}`",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The min year and month selectable in ISO8601 format (yyyy-mm)",
          "docsTags": [],
          "values": [
            {
              "type": "`${string}-${string}`"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "`${string}-${string}`",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The current selected year and month in ISO8601 format (yyyy-mm)",
          "docsTags": [],
          "values": [
            {
              "type": "`${string}-${string}`"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon", "gux-month-calendar", "gux-popup"],
      "dependencyGraph": {
        "gux-month-picker-beta": [
          "gux-icon",
          "gux-month-calendar",
          "gux-popup"
        ],
        "gux-month-calendar": [
          "gux-icon",
          "gux-month-list-item",
          "gux-month-list"
        ]
      }
    },
    {
      "filePath": "./src/components/stable/gux-notification-toast/gux-notification-toast.tsx",
      "encapsulation": "shadow",
      "tag": "gux-notification-toast",
      "readme": "# gux-notification-toast\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "icon - Required slot for gux-icon"
        },
        {
          "name": "slot",
          "text": "title - Required slot for the notification toast title"
        },
        {
          "name": "slot",
          "text": "message - Required slot for the notification toast message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"alert\" | \"neutral\" | \"positive\" | \"warning\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "The component accent.",
          "docsTags": [],
          "default": "'neutral'",
          "values": [
            {
              "value": "alert",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "positive",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxdismiss",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "icon",
          "docs": "Required slot for gux-icon"
        },
        {
          "name": "message",
          "docs": "Required slot for the notification toast message"
        },
        {
          "name": "title",
          "docs": "Required slot for the notification toast title"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-dismiss-button"],
      "dependencyGraph": {
        "gux-notification-toast": ["gux-dismiss-button"],
        "gux-dismiss-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-listbox/gux-option/gux-option.tsx",
      "encapsulation": "none",
      "tag": "gux-option",
      "readme": "# gux-option\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filtered",
          "type": "boolean",
          "mutable": false,
          "attr": "filtered",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hovered",
          "type": "boolean",
          "mutable": true,
          "attr": "hovered",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gux-pagination-items-per-page",
        "gux-pagination-items-per-page-beta"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gux-pagination-items-per-page": ["gux-option"],
        "gux-pagination-items-per-page-beta": ["gux-option"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-dropdown-legacy/gux-option-legacy/gux-option.tsx",
      "encapsulation": "none",
      "tag": "gux-option-legacy",
      "readme": "# gux-option-legacy\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If this Boolean attribute is set, this option is not checkable. It won't receive any\nbrowsing events, like mouse clicks or focus-related ones.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": true,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The content of this attribute represents the value to be displayed,\nIf this attribute is omitted, the value is taken from the text content of the slot.\nThis attribute takes precedence over slot value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The content of this attribute represents the value to be submitted on 'input' changes,\nshould this option be selected. If this attribute is omitted, the value is taken from\nthe text content of the option element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "shouldFilter",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "shouldFilter(searchInput: string) => Promise<boolean>",
          "parameters": [],
          "docs": "Determines if the search input matches this option.",
          "docsTags": [
            {
              "name": "param",
              "text": "searchInput The input string being searched for."
            }
          ]
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-listbox-multi/gux-option-multi/gux-option-multi.tsx",
      "encapsulation": "none",
      "tag": "gux-option-multi",
      "readme": "# gux-option-multi\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "custom",
          "type": "boolean",
          "mutable": false,
          "attr": "custom",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filtered",
          "type": "boolean",
          "mutable": false,
          "attr": "filtered",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hovered",
          "type": "boolean",
          "mutable": true,
          "attr": "hovered",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxremovecustomoption",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "internalselectcustomoption",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-page-loading-spinner/gux-page-loading-spinner.tsx",
      "encapsulation": "shadow",
      "tag": "gux-page-loading-spinner",
      "readme": "# gux-page-loading-spinner\n\nA simple loading spinner for loading pages.\n",
      "docs": "A simple loading spinner for loading pages.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "screenreaderText",
          "type": "string",
          "mutable": false,
          "attr": "screenreader-text",
          "reflectToAttr": false,
          "docs": "Localized text to provide an accessible label for the component.\nIf no screenreader text is provided, the localized string \"Loading\" will be used by default",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-radial-loading"],
      "dependencyGraph": {
        "gux-page-loading-spinner": ["gux-radial-loading"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-pagination/gux-pagination.tsx",
      "encapsulation": "shadow",
      "tag": "gux-pagination",
      "readme": "# gux-pagination\n\nA pagination control intended to be used underneath a table or grid with paged\ncontent. Given a total number of items, the view will automatically calculate\na total number of pages (you can optionally supply the number of items per page\nand/or initial starting page).\n\nWhen a user changes pages, the component will emit a `guxpaginationchange` event with\nthe pagination state.\n\n",
      "docs": "A pagination control intended to be used underneath a table or grid with paged\ncontent. Given a total number of items, the view will automatically calculate\na total number of pages (you can optionally supply the number of items per page\nand/or initial starting page).\n\nWhen a user changes pages, the component will emit a `guxpaginationchange` event with\nthe pagination state.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "mutable": true,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "The currently select page. Changes are watched by the component.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemsPerPage",
          "type": "100 | 25 | 50 | 75",
          "mutable": true,
          "attr": "items-per-page",
          "reflectToAttr": false,
          "docs": "The max number of items on a page. Used to calculate total page count",
          "docsTags": [],
          "default": "25",
          "values": [
            {
              "value": "100",
              "type": "number"
            },
            {
              "value": "25",
              "type": "number"
            },
            {
              "value": "50",
              "type": "number"
            },
            {
              "value": "75",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"expanded\" | \"full\" | \"small\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "The pagination component can have different layouts to suit the available space",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "expanded",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "The total number of items in the data set. Used to calculate total page count",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxpaginationchange",
          "detail": "{ currentPage: number; itemsPerPage: number; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-pagination-item-counts",
        "gux-pagination-items-per-page",
        "gux-pagination-buttons"
      ],
      "dependencyGraph": {
        "gux-pagination": [
          "gux-pagination-item-counts",
          "gux-pagination-items-per-page",
          "gux-pagination-buttons"
        ],
        "gux-pagination-items-per-page": [
          "gux-dropdown",
          "gux-listbox",
          "gux-option"
        ],
        "gux-dropdown": ["gux-icon", "gux-radial-loading", "gux-popup"],
        "gux-listbox": ["gux-radial-loading"],
        "gux-pagination-buttons": [
          "gux-form-field-text-like",
          "gux-button-slot-beta",
          "gux-icon"
        ],
        "gux-form-field-text-like": [
          "gux-form-field-input-clear-button",
          "gux-icon"
        ],
        "gux-form-field-input-clear-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-pagination-beta/gux-pagination-beta.tsx",
      "encapsulation": "shadow",
      "tag": "gux-pagination-beta",
      "readme": "# gux-pagination\n\nA pagination control intended to be used underneath a table or grid with paged\ncontent. Given a total number of items, the view will automatically calculate\na total number of pages (you can optionally supply the number of items per page\nand/or initial starting page).\n\nWhen a user changes pages, the component will emit a `guxpaginationchange` event with\nthe pagination state.\n\n",
      "docs": "A pagination control intended to be used underneath a table or grid with paged\ncontent. Given a total number of items, the view will automatically calculate\na total number of pages (you can optionally supply the number of items per page\nand/or initial starting page).\n\nWhen a user changes pages, the component will emit a `guxpaginationchange` event with\nthe pagination state.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "mutable": true,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "The currently select page. Changes are watched by the component.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemsPerPage",
          "type": "100 | 25 | 50 | 75",
          "mutable": true,
          "attr": "items-per-page",
          "reflectToAttr": false,
          "docs": "The max number of items on a page. Used to calculate total page count",
          "docsTags": [],
          "default": "25",
          "values": [
            {
              "value": "100",
              "type": "number"
            },
            {
              "value": "25",
              "type": "number"
            },
            {
              "value": "50",
              "type": "number"
            },
            {
              "value": "75",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"advanced\" | \"simple\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "The pagination component can have different layouts to suit the available space",
          "docsTags": [],
          "default": "'advanced'",
          "values": [
            {
              "value": "advanced",
              "type": "string"
            },
            {
              "value": "simple",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "The total number of items in the data set. Used to calculate total page count",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxpaginationchange",
          "detail": "{ currentPage: number; itemsPerPage: number; }",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-pagination-item-counts-beta",
        "gux-pagination-items-per-page-beta",
        "gux-pagination-buttons-beta"
      ],
      "dependencyGraph": {
        "gux-pagination-beta": [
          "gux-pagination-item-counts-beta",
          "gux-pagination-items-per-page-beta",
          "gux-pagination-buttons-beta"
        ],
        "gux-pagination-items-per-page-beta": [
          "gux-dropdown",
          "gux-listbox",
          "gux-option"
        ],
        "gux-dropdown": ["gux-icon", "gux-radial-loading", "gux-popup"],
        "gux-listbox": ["gux-radial-loading"],
        "gux-pagination-buttons-beta": ["gux-button-slot-beta", "gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-pagination/gux-pagination-buttons/gux-pagination-buttons.tsx",
      "encapsulation": "none",
      "tag": "gux-pagination-buttons",
      "readme": "# gux-pagination-buttons\n\nAn internal component used by the gux-pagination component.\n\n",
      "docs": "An internal component used by the gux-pagination component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"expanded\" | \"full\" | \"small\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "expanded",
              "type": "string"
            },
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internalcurrentpagechange",
          "detail": "number",
          "bubbles": false,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-pagination"],
      "dependencies": [
        "gux-form-field-text-like",
        "gux-button-slot-beta",
        "gux-icon"
      ],
      "dependencyGraph": {
        "gux-pagination-buttons": [
          "gux-form-field-text-like",
          "gux-button-slot-beta",
          "gux-icon"
        ],
        "gux-form-field-text-like": [
          "gux-form-field-input-clear-button",
          "gux-icon"
        ],
        "gux-form-field-input-clear-button": ["gux-icon"],
        "gux-pagination": ["gux-pagination-buttons"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-pagination-beta/gux-pagination-buttons-beta/gux-pagination-buttons-beta.tsx",
      "encapsulation": "none",
      "tag": "gux-pagination-buttons-beta",
      "readme": "# gux-pagination-buttons\n\nAn internal component used by the gux-pagination component.\n\n",
      "docs": "An internal component used by the gux-pagination component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "\"advanced\" | \"simple\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'advanced'",
          "values": [
            {
              "value": "advanced",
              "type": "string"
            },
            {
              "value": "simple",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internalcurrentpagechange",
          "detail": "number",
          "bubbles": false,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-pagination-beta"],
      "dependencies": ["gux-button-slot-beta", "gux-icon"],
      "dependencyGraph": {
        "gux-pagination-buttons-beta": ["gux-button-slot-beta", "gux-icon"],
        "gux-pagination-beta": ["gux-pagination-buttons-beta"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-pagination-cursor/gux-pagination-cursor.tsx",
      "encapsulation": "shadow",
      "tag": "gux-pagination-cursor",
      "readme": "# gux-pagination-cursor\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "hasNext",
          "type": "boolean",
          "mutable": false,
          "attr": "has-next",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasPrevious",
          "type": "boolean",
          "mutable": false,
          "attr": "has-previous",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxPaginationCursorchange",
          "detail": "\"next\" | \"previous\"",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-button-slot-beta", "gux-icon"],
      "dependencyGraph": {
        "gux-pagination-cursor": ["gux-button-slot-beta", "gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-pagination/gux-pagination-item-counts/gux-pagination-item-counts.tsx",
      "encapsulation": "none",
      "tag": "gux-pagination-item-counts",
      "readme": "# gux-pagination-item-counts\n\nAn internal component used by the gux-pagination component.\n\n",
      "docs": "An internal component used by the gux-pagination component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemsPerPage",
          "type": "number",
          "mutable": false,
          "attr": "items-per-page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "25",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-pagination"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-pagination": ["gux-pagination-item-counts"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-pagination-beta/gux-pagination-item-counts-beta/gux-pagination-item-counts-beta.tsx",
      "encapsulation": "none",
      "tag": "gux-pagination-item-counts-beta",
      "readme": "# gux-pagination-item-counts\n\nAn internal component used by the gux-pagination component.\n\n",
      "docs": "An internal component used by the gux-pagination component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemsPerPage",
          "type": "number",
          "mutable": false,
          "attr": "items-per-page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "25",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-pagination-beta"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-pagination-beta": ["gux-pagination-item-counts-beta"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-pagination/gux-pagination-items-per-page/gux-pagination-items-per-page.tsx",
      "encapsulation": "none",
      "tag": "gux-pagination-items-per-page",
      "readme": "# gux-pagination-items-per-page\n\nAn internal component used by the gux-pagination component.\n\n",
      "docs": "An internal component used by the gux-pagination component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "itemsPerPage",
          "type": "100 | 25 | 50 | 75",
          "mutable": false,
          "attr": "items-per-page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "25",
          "values": [
            {
              "value": "100",
              "type": "number"
            },
            {
              "value": "25",
              "type": "number"
            },
            {
              "value": "50",
              "type": "number"
            },
            {
              "value": "75",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internalitemsperpagechange",
          "detail": "number",
          "bubbles": false,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "change",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-pagination"],
      "dependencies": ["gux-dropdown", "gux-listbox", "gux-option"],
      "dependencyGraph": {
        "gux-pagination-items-per-page": [
          "gux-dropdown",
          "gux-listbox",
          "gux-option"
        ],
        "gux-dropdown": ["gux-icon", "gux-radial-loading", "gux-popup"],
        "gux-listbox": ["gux-radial-loading"],
        "gux-pagination": ["gux-pagination-items-per-page"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-pagination-beta/gux-pagination-items-per-page-beta/gux-pagination-items-per-page-beta.tsx",
      "encapsulation": "none",
      "tag": "gux-pagination-items-per-page-beta",
      "readme": "# gux-pagination-items-per-page\n\nAn internal component used by the gux-pagination component.\n\n",
      "docs": "An internal component used by the gux-pagination component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "itemsPerPage",
          "type": "100 | 25 | 50 | 75",
          "mutable": false,
          "attr": "items-per-page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "25",
          "values": [
            {
              "value": "100",
              "type": "number"
            },
            {
              "value": "25",
              "type": "number"
            },
            {
              "value": "50",
              "type": "number"
            },
            {
              "value": "75",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internalitemsperpagechange",
          "detail": "number",
          "bubbles": false,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "change",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-pagination-beta"],
      "dependencies": ["gux-dropdown", "gux-listbox", "gux-option"],
      "dependencyGraph": {
        "gux-pagination-items-per-page-beta": [
          "gux-dropdown",
          "gux-listbox",
          "gux-option"
        ],
        "gux-dropdown": ["gux-icon", "gux-radial-loading", "gux-popup"],
        "gux-listbox": ["gux-radial-loading"],
        "gux-pagination-beta": ["gux-pagination-items-per-page-beta"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-panel-frame-legacy/gux-panel-frame.tsx",
      "encapsulation": "shadow",
      "tag": "gux-panel-frame-legacy",
      "readme": "# gux-panel-frame\r\n\r\nThe frame of a single panel. Also contains the panel header, body and footer.\r\n\r",
      "docs": "The frame of a single panel. Also contains the panel header, body and footer.",
      "docsTags": [
        {
          "name": "slot",
          "text": "header - slot for header content"
        },
        {
          "name": "slot",
          "text": "body - slot for body content"
        },
        {
          "name": "slot",
          "text": "footer - slot for footer content"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "body",
          "docs": "slot for body content"
        },
        {
          "name": "footer",
          "docs": "slot for footer content"
        },
        {
          "name": "header",
          "docs": "slot for header content"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-popover/gux-popover.tsx",
      "encapsulation": "shadow",
      "tag": "gux-popover",
      "readme": "# gux-popover\n\n## Possible Improvements\n\n- add a dark theme. There is currently none in the style guide (No Jira)\n- add a gux-popover-paragraph component with title and content slots (No Jira)\n- add a gux-popover-list component and gux-popover-list-option component (No Jira)\n  - It may be possible to use gux-list for this.\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeOnClickOutside",
          "type": "boolean",
          "mutable": false,
          "attr": "close-on-click-outside",
          "reflectToAttr": false,
          "docs": "Close popover when the user clicks outside of its bounds",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayDismissButton",
          "type": "boolean",
          "mutable": false,
          "attr": "display-dismiss-button",
          "reflectToAttr": false,
          "docs": "Indicate if the dismiss button is displayed",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "for",
          "type": "string",
          "mutable": false,
          "attr": "for",
          "reflectToAttr": false,
          "docs": "Indicates the id of the element the popover should anchor to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Indicate position of popover element arrow (follow popper js position attribute api)",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxdismiss",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when a user dismisses the popover",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-dismiss-button"],
      "dependencyGraph": {
        "gux-popover": ["gux-dismiss-button"],
        "gux-dismiss-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-popover-list/gux-popover-list.tsx",
      "encapsulation": "shadow",
      "tag": "gux-popover-list",
      "readme": "# gux-popover-list\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeOnClickOutside",
          "type": "boolean",
          "mutable": false,
          "attr": "close-on-click-outside",
          "reflectToAttr": false,
          "docs": "Close popover when the user clicks outside of its bounds",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayDismissButton",
          "type": "boolean",
          "mutable": false,
          "attr": "display-dismiss-button",
          "reflectToAttr": false,
          "docs": "Indicate if the dismiss button is displayed",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "for",
          "type": "string",
          "mutable": false,
          "attr": "for",
          "reflectToAttr": false,
          "docs": "Indicates the id of the element the popover should anchor to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Indicate position of popover element arrow (follow popper js position attribute api)",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxdismiss",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when a user dismisses the popover",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-tab-advanced", "gux-tab-legacy"],
      "dependencies": ["gux-dismiss-button"],
      "dependencyGraph": {
        "gux-popover-list": ["gux-dismiss-button"],
        "gux-dismiss-button": ["gux-icon"],
        "gux-tab-advanced": ["gux-popover-list"],
        "gux-tab-legacy": ["gux-popover-list"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-popup/gux-popup.tsx",
      "encapsulation": "shadow",
      "tag": "gux-popup",
      "readme": "# gux-input\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "target - Required slot for target"
        },
        {
          "name": "slot",
          "text": "popup - Required slot for popup"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internalcollapsed",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "This event will run when the popup transitions to a collapsed state.",
          "docsTags": []
        },
        {
          "event": "internalexpanded",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "This event will run when the popup transitions to an expanded state.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "popup",
          "docs": "Required slot for popup"
        },
        {
          "name": "target",
          "docs": "Required slot for target"
        }
      ],
      "parts": [],
      "dependents": [
        "gux-action-button",
        "gux-action-button-legacy",
        "gux-advanced-dropdown",
        "gux-button-multi",
        "gux-button-multi-legacy",
        "gux-dropdown",
        "gux-dropdown-multi-beta",
        "gux-month-picker-beta",
        "gux-time-picker-beta"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gux-action-button": ["gux-popup"],
        "gux-action-button-legacy": ["gux-popup"],
        "gux-advanced-dropdown": ["gux-popup"],
        "gux-button-multi": ["gux-popup"],
        "gux-button-multi-legacy": ["gux-popup"],
        "gux-dropdown": ["gux-popup"],
        "gux-dropdown-multi-beta": ["gux-popup"],
        "gux-month-picker-beta": ["gux-popup"],
        "gux-time-picker-beta": ["gux-popup"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-radial-loading/gux-radial-loading.tsx",
      "encapsulation": "shadow",
      "tag": "gux-radial-loading",
      "readme": "# gux-radial-loading\n\nWhen the loading of a task is known, this component displays a radial indicator and the completed percentage of\nthe task.\n\nOtherwise, if the loading is unknown, and no percentage is provided, it instead displays a simple Loading Spinner.\n",
      "docs": "When the loading of a task is known, this component displays a radial indicator and the completed percentage of\nthe task.\n\nOtherwise, if the loading is unknown, and no percentage is provided, it instead displays a simple Loading Spinner.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "context",
          "type": "\"full-page\" | \"input\" | \"modal\"",
          "mutable": false,
          "attr": "context",
          "reflectToAttr": false,
          "docs": "The display context the component is in.",
          "docsTags": [],
          "default": "'modal'",
          "values": [
            {
              "value": "full-page",
              "type": "string"
            },
            {
              "value": "input",
              "type": "string"
            },
            {
              "value": "modal",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "screenreaderText",
          "type": "string",
          "mutable": false,
          "attr": "screenreader-text",
          "reflectToAttr": false,
          "docs": "Localized text to provide an accessible label for the component.\nIf no screenreader text is provided, the localized string \"Loading\" will be used by default.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gux-dropdown",
        "gux-dropdown-multi-beta",
        "gux-listbox",
        "gux-listbox-multi",
        "gux-page-loading-spinner",
        "gux-radial-progress",
        "gux-toggle"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gux-dropdown": ["gux-radial-loading"],
        "gux-dropdown-multi-beta": ["gux-radial-loading"],
        "gux-listbox": ["gux-radial-loading"],
        "gux-listbox-multi": ["gux-radial-loading"],
        "gux-page-loading-spinner": ["gux-radial-loading"],
        "gux-radial-progress": ["gux-radial-loading"],
        "gux-toggle": ["gux-radial-loading"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-radial-progress/gux-radial-progress.tsx",
      "encapsulation": "shadow",
      "tag": "gux-radial-progress",
      "readme": "# gux-radial-progress\r\n\r\nWhen the progress of a task is known, this component displays a radial indicator and the completed percentage of \r\nthe task.\r\n\r\nOtherwise, if the progress is unknown, and no percentage is provided, it instead displays a simple Loading Spinner.\r\n\r",
      "docs": "When the progress of a task is known, this component displays a radial indicator and the completed percentage of \r\nthe task.\r\n\r\nOtherwise, if the progress is unknown, and no percentage is provided, it instead displays a simple Loading Spinner.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The max value of the progress spinner",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scale",
          "type": "0 | 1 | 2",
          "mutable": false,
          "attr": "scale",
          "reflectToAttr": false,
          "docs": "The max number of decimal places that will be displayed",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "value": "0",
              "type": "number"
            },
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "screenreaderText",
          "type": "string",
          "mutable": false,
          "attr": "screenreader-text",
          "reflectToAttr": false,
          "docs": "Required localized text to provide an accessible label for the component",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The progress made in the progress spinner compared to the max value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-radial-loading"],
      "dependencyGraph": {
        "gux-radial-progress": ["gux-radial-loading"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-rating/gux-rating.tsx",
      "encapsulation": "shadow",
      "tag": "gux-rating",
      "readme": "# gux-rating\n\n## Native Events\n\n| Event    | Description | Type               |\n| -------- | ----------- | ------------------ |\n| `change` |             | `InputEvent`       |\n| `input`  |             | `InputEvent`       |\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxValue",
          "type": "number",
          "mutable": false,
          "attr": "max-value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-rating": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-table/gux-row-select/gux-row-select.tsx",
      "encapsulation": "none",
      "tag": "gux-row-select",
      "readme": "# gux-row-select\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internalrowselectchange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "input",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-form-field-checkbox"],
      "dependencyGraph": {
        "gux-row-select": ["gux-form-field-checkbox"],
        "gux-form-field-checkbox": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-screen-reader/gux-screen-reader.tsx",
      "encapsulation": "shadow",
      "tag": "gux-screen-reader-beta",
      "readme": "# gux-date-beta\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- text"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "text"
        }
      ],
      "parts": [],
      "dependents": ["gux-form-field-time-picker"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-form-field-time-picker": ["gux-screen-reader-beta"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-side-panel-legacy/buttons/gux-side-panel-button.tsx",
      "encapsulation": "none",
      "tag": "gux-side-panel-button",
      "readme": "# gux-pagination-buttons\n\nAn internal component used by the gux-pagination component.\n\n",
      "docs": "An internal component used by the gux-pagination component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "altText",
          "type": "string",
          "mutable": false,
          "attr": "alt-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isSelected",
          "type": "boolean",
          "mutable": false,
          "attr": "is-selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-side-panel-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-side-panel-legacy/gux-side-panel.tsx",
      "encapsulation": "none",
      "tag": "gux-side-panel-legacy",
      "readme": "# gux-side-panel\n\nSee the code in the story.tsx file for an example of how to build this component using the `gux-side-panel`, `gux-panel-frame` and `gux-side-panel-button`.\n",
      "docs": "See the code in the story.tsx file for an example of how to build this component using the `gux-side-panel`, `gux-panel-frame` and `gux-side-panel-button`.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "isOpen",
          "type": "boolean",
          "mutable": false,
          "attr": "is-open",
          "reflectToAttr": false,
          "docs": "Open or close the content",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "The position of the side panel",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-simple-toast/gux-simple-toast.tsx",
      "encapsulation": "shadow",
      "tag": "gux-simple-toast",
      "readme": "# gux-simple-toast\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \n",
      "docs": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
      "docsTags": [
        {
          "name": "slot",
          "text": "icon - Required slot for gux-icon"
        },
        {
          "name": "slot",
          "text": "message - Required slot for the simple toast message"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accent",
          "type": "\"alert\" | \"neutral\" | \"positive\" | \"warning\"",
          "mutable": false,
          "attr": "accent",
          "reflectToAttr": false,
          "docs": "The component accent.",
          "docsTags": [],
          "default": "'neutral'",
          "values": [
            {
              "value": "alert",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "positive",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxdismiss",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "icon",
          "docs": "Required slot for gux-icon"
        },
        {
          "name": "message",
          "docs": "Required slot for the simple toast message"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-dismiss-button"],
      "dependencyGraph": {
        "gux-simple-toast": ["gux-dismiss-button"],
        "gux-dismiss-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-skip-navigation-list/gux-skip-navigation-item/gux-skip-navigation-item.tsx",
      "encapsulation": "shadow",
      "tag": "gux-skip-navigation-item",
      "readme": "# gux-skip-navigation-list-item-beta\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-skip-navigation-list/gux-skip-navigation-list.tsx",
      "encapsulation": "shadow",
      "tag": "gux-skip-navigation-list-beta",
      "readme": "# gux-skip-navigation-list-beta\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-table/gux-sort-control/gux-sort-control.tsx",
      "encapsulation": "shadow",
      "tag": "gux-sort-control",
      "readme": "# gux-th\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "includeUnsorted",
          "type": "boolean",
          "mutable": false,
          "attr": "include-unsorted",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxsortchanged",
          "detail": "GuxTableSortState",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-sort-control": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-flyout-menu/gux-menu/gux-submenu/gux-submenu.tsx",
      "encapsulation": "none",
      "tag": "gux-submenu",
      "readme": "# gux-flyout-menu\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxFocus() => Promise<void>",
          "parameters": [],
          "docs": "Focus on the components button element",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-submenu": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-switch/gux-switch.tsx",
      "encapsulation": "shadow",
      "tag": "gux-switch",
      "readme": "# gux-switch\n\n## Native Events\n\n| Event    | Description | Type               |\n| -------- | ----------- | ------------------ |\n| `change` |             | `InputEvent`       |\n| `input`  |             | `InputEvent`       |\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- list of gux-switch-item elements"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "layout",
          "type": "\"default\" | \"small\"",
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "list of gux-switch-item elements"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-switch/gux-switch-item/gux-switch-item.tsx",
      "encapsulation": "none",
      "tag": "gux-switch-item",
      "readme": "# gux-switch\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n",
      "docs": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-tabs/gux-tab/gux-tab.tsx",
      "encapsulation": "none",
      "tag": "gux-tab",
      "readme": "# gux-tabs-list\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "guxDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "gux-disabled",
          "reflectToAttr": false,
          "docs": "Specifies if tab is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabId",
          "type": "string",
          "mutable": false,
          "attr": "tab-id",
          "reflectToAttr": false,
          "docs": "Tab id for the tab",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "guxGetActive",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "guxGetActive() => Promise<boolean>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "guxSetActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxSetActive(active: boolean) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "internalactivatetabpanel",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-tooltip-title"],
      "dependencyGraph": {
        "gux-tab": ["gux-tooltip-title"],
        "gux-tooltip-title": ["gux-tooltip"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-tabs-advanced/gux-tab-advanced/gux-tab-advanced.tsx",
      "encapsulation": "none",
      "tag": "gux-tab-advanced",
      "readme": "# gux-tab-advanced\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - gux-icon (optional) and text node (required)"
        },
        {
          "name": "slot",
          "text": "dropdown-options - optional slot for tab options, must slot a gux-list element with gux-list-item children"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "guxDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "gux-disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabId",
          "type": "string",
          "mutable": false,
          "attr": "tab-id",
          "reflectToAttr": false,
          "docs": "unique id for the tab",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "guxGetActive",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "signature": "guxGetActive() => Promise<boolean>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "guxSetActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxSetActive(active: boolean) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "internalactivatetabpanel",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "gux-icon (optional) and text node (required)"
        },
        {
          "name": "dropdown-options",
          "docs": "optional slot for tab options, must slot a gux-list element with gux-list-item children"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon", "gux-popover-list", "gux-tooltip-title"],
      "dependencyGraph": {
        "gux-tab-advanced": [
          "gux-icon",
          "gux-popover-list",
          "gux-tooltip-title"
        ],
        "gux-popover-list": ["gux-dismiss-button"],
        "gux-dismiss-button": ["gux-icon"],
        "gux-tooltip-title": ["gux-tooltip"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-tabs-advanced/gux-tab-advanced-list/gux-tab-advanced-list.tsx",
      "encapsulation": "none",
      "tag": "gux-tab-advanced-list",
      "readme": "# gux-tab-advanced-list\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowSort",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-sort",
          "reflectToAttr": false,
          "docs": "Enable tab sorting by drag/drop",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showNewTabButton",
          "type": "boolean",
          "mutable": false,
          "attr": "show-new-tab-button",
          "reflectToAttr": false,
          "docs": "Enable new tab button",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabLimit",
          "type": "number",
          "mutable": false,
          "attr": "tab-limit",
          "reflectToAttr": false,
          "docs": "Maximum nuber of tabs created",
          "docsTags": [],
          "default": "Infinity",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxSetActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxSetActive(activeTab: string) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "newTab",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the new tab button is selected.",
          "docsTags": []
        },
        {
          "event": "sortChanged",
          "detail": "string[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the sorting of the tabs is changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "focusin",
          "capture": false,
          "passive": false
        },
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-tab-advanced-list": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-tabs-advanced/gux-tab-advanced-panel/gux-tab-advanced-panel.tsx",
      "encapsulation": "none",
      "tag": "gux-tab-advanced-panel",
      "readme": "# gux-tab-advanced-panel\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "tabId",
          "type": "string",
          "mutable": false,
          "attr": "tab-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxSetActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxSetActive(active: boolean) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "guxactivepanelchange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/legacy/gux-tabs-legacy/gux-tab-dropdown-option-legacy/gux-tab-dropdown-option-legacy.tsx",
      "encapsulation": "none",
      "tag": "gux-tab-dropdown-option-legacy",
      "readme": "# gux-tab-dropdown-option-legacy\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "iconName",
          "type": "string",
          "mutable": false,
          "attr": "icon-name",
          "reflectToAttr": false,
          "docs": "name of the gux-icon to display for the option",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionId",
          "type": "string",
          "mutable": false,
          "attr": "option-id",
          "reflectToAttr": false,
          "docs": "unique id for the option",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-tab-dropdown-option-legacy": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-tabs-legacy/gux-tab-legacy/gux-tab-legacy.tsx",
      "encapsulation": "none",
      "tag": "gux-tab-legacy",
      "readme": "# gux-tab-legacy\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "indicates whether or not the tab is selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabIconName",
          "type": "string",
          "mutable": false,
          "attr": "tab-icon-name",
          "reflectToAttr": false,
          "docs": "indicates the gux-icon to display on the left side of the tab (similar to a favicon in the browser)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabId",
          "type": "string",
          "mutable": false,
          "attr": "tab-id",
          "reflectToAttr": false,
          "docs": "unique id for the tab",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internaltabselected",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon", "gux-popover-list"],
      "dependencyGraph": {
        "gux-tab-legacy": ["gux-icon", "gux-popover-list"],
        "gux-popover-list": ["gux-dismiss-button"],
        "gux-dismiss-button": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-tabs/gux-tab-list/gux-tab-list.tsx",
      "encapsulation": "none",
      "tag": "gux-tab-list",
      "readme": "# gux-tab-list\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "guxSetActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxSetActive(activeTab: string) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "focusout",
          "capture": false,
          "passive": false
        },
        {
          "event": "hasVerticalScrollbar",
          "capture": false,
          "passive": false
        },
        {
          "event": "scroll",
          "capture": true,
          "passive": true
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-tab-list": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-tabs/gux-tab-panel/gux-tab-panel.tsx",
      "encapsulation": "none",
      "tag": "gux-tab-panel",
      "readme": "# gux-tab-panel\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "tabId",
          "type": "string",
          "mutable": false,
          "attr": "tab-id",
          "reflectToAttr": false,
          "docs": "Tab id of the tab that is associated with the panel",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxSetActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxSetActive(active: boolean) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "guxactivepanelchange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the active panel changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-table/gux-table.tsx",
      "encapsulation": "shadow",
      "tag": "gux-table-beta",
      "readme": "# gux-table-beta\n\n## Breaking Changes during the beta period\n\n### Sorting API Change\nTo improve the accessibility of the table sorting functionality we needed\nto make an API change. To make a table sortable by a particular column you now\nneed to use a `gux-sort-control` component in that columns `<th>` element.\nPreviously you needed to add a `data-sortable` attribute in that columns `<th>`\nelement.\n\n#### Migration Example\n\nBefore:\n```\n<gux-table-beta>\n  <table slot=\"data\">\n    <thead>\n      <tr>\n        <th data-sortable data-column-name=\"c1\" aria-sort=\"ascending\">Column 1 Header</th>\n        <th data-sortable data-column-name=\"c2\">Column 2 Header</th>\n        <th>Column 3 Header</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Column 1, Row 1</td>\n        <td>Column 2, Row 1</td>\n        <td>Column 3, Row 1</td>\n      </tr>\n    </tbody>\n  </table>\n</gux-table-beta>\n```\n\nAfter:\n```\n<gux-table-beta>\n  <table slot=\"data\">\n    <thead>\n      <tr>\n        <th data-column-name=\"c1\" aria-sort=\"ascending\">Column 1 Header <gux-sort-control /></th>\n        <th data-column-name=\"c2\">Column 2 Header <gux-sort-control /></th>\n        <th>Column 3 Header</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Column 1, Row 1</td>\n        <td>Column 2, Row 1</td>\n        <td>Column 3, Row 1</td>\n      </tr>\n    </tbody>\n  </table>\n</gux-table-beta>\n```\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "compact",
          "type": "boolean",
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "Indicates table row density style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyMessage",
          "type": "string",
          "mutable": false,
          "attr": "empty-message",
          "reflectToAttr": false,
          "docs": "Represents info message that should be displayed for empty table",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "objectTable",
          "type": "boolean",
          "mutable": false,
          "attr": "object-table",
          "reflectToAttr": false,
          "docs": "Indicates that object table specific styles should be applied",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resizableColumns",
          "type": "boolean",
          "mutable": false,
          "attr": "resizable-columns",
          "reflectToAttr": false,
          "docs": "Indicates that table should have resizable columns",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelected",
          "returns": {
            "type": "Promise<GuxTableSelectedState>",
            "docs": ""
          },
          "signature": "getSelected() => Promise<GuxTableSelectedState>",
          "parameters": [],
          "docs": "Returns the selected rows Ids.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "guxselectionchanged",
          "detail": "GuxTableSelectedState",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when table row was selected/unselected",
          "docsTags": []
        },
        {
          "event": "guxsortchanged",
          "detail": "GuxTableSortState",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the sorting of the table column is changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "scroll",
          "capture": true,
          "passive": true
        },
        {
          "event": "internalallrowselectchange",
          "capture": false,
          "passive": false
        },
        {
          "event": "internalrowselectchange",
          "capture": false,
          "passive": false
        },
        {
          "event": "mousemove",
          "capture": true,
          "passive": true
        },
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseup",
          "capture": true,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-button-slot-beta", "gux-icon"],
      "dependencyGraph": {
        "gux-table-beta": ["gux-button-slot-beta", "gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-table/gux-table-select-menu/gux-table-select-menu.tsx",
      "encapsulation": "none",
      "tag": "gux-table-select-menu",
      "readme": "# gux-table-select-menu\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Required slot for gux-all-row-select element"
        },
        {
          "name": "slot",
          "text": "select-menu-options - Optional slot for gux-list containing gux-list-item children"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "dropdownDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "dropdown-disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Required slot for gux-all-row-select element"
        },
        {
          "name": "select-menu-options",
          "docs": "Optional slot for gux-list containing gux-list-item children"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon", "gux-table-select-popover"],
      "dependencyGraph": {
        "gux-table-select-menu": ["gux-icon", "gux-table-select-popover"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-table/gux-table-select-menu/gux-table-select-popover/gux-table-header-popover.tsx",
      "encapsulation": "shadow",
      "tag": "gux-table-select-popover",
      "readme": "# gux-table-select-popover\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeOnClickOutside",
          "type": "boolean",
          "mutable": false,
          "attr": "close-on-click-outside",
          "reflectToAttr": false,
          "docs": "Close popover when the user clicks outside of its bounds",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "for",
          "type": "string",
          "mutable": false,
          "attr": "for",
          "reflectToAttr": false,
          "docs": "Indicates the id of the element the popover should anchor to",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxdismiss",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fired when a user dismisses the popover",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-table-select-menu"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-table-select-menu": ["gux-table-select-popover"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-tabs/gux-tabs.tsx",
      "encapsulation": "shadow",
      "tag": "gux-tabs",
      "readme": "# gux-tabs-beta\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeTab",
          "type": "string",
          "mutable": true,
          "attr": "active-tab",
          "reflectToAttr": false,
          "docs": "tabId of the currently selected tab",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "alignment",
          "type": "\"center\" | \"fullWidth\" | \"left\"",
          "mutable": false,
          "attr": "alignment",
          "reflectToAttr": false,
          "docs": "Specifies left aligned, centered, or full width tabs",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "fullWidth",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\"",
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Specifies horizontal or vertical orientation of tabs",
          "docsTags": [],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxActivate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxActivate(tabId: string) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "guxactivetabchange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the active tab changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "internalactivatetabpanel",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/stable/gux-tabs-advanced/gux-tabs-advanced.tsx",
      "encapsulation": "shadow",
      "tag": "gux-tabs-advanced",
      "readme": "# gux-tabs-advanced\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeTab",
          "type": "string",
          "mutable": true,
          "attr": "active-tab",
          "reflectToAttr": false,
          "docs": "tabId of the currently selected tab",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "guxActivate",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "guxActivate(tabId: string) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "guxactivetabchange",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the active tab changes.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "internalactivatetabpanel",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/legacy/gux-tabs-legacy/gux-tabs-legacy.tsx",
      "encapsulation": "shadow",
      "tag": "gux-tabs-legacy",
      "readme": "# gux-tabs-legacy\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowSort",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-sort",
          "reflectToAttr": false,
          "docs": "Enable tab sorting by drag/drop",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showNewTabButton",
          "type": "boolean",
          "mutable": false,
          "attr": "show-new-tab-button",
          "reflectToAttr": false,
          "docs": "Enable new tab button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabLimit",
          "type": "number",
          "mutable": false,
          "attr": "tab-limit",
          "reflectToAttr": false,
          "docs": "Maximum nuber of tabs created",
          "docsTags": [],
          "default": "Infinity",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "tabId of the currently selected tab",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "input",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when a tab is selected.",
          "docsTags": []
        },
        {
          "event": "newTab",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the new tab button is selected.",
          "docsTags": []
        },
        {
          "event": "sortChanged",
          "detail": "string[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggers when the sorting of the tabs is changed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "internaltabselected",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-tabs-legacy": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-tag/gux-tag.tsx",
      "encapsulation": "shadow",
      "tag": "gux-tag-beta",
      "readme": "# gux-tag-beta\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"alert-yellow-green\" | \"aqua-green\" | \"blue\" | \"bubblegum-pink\" | \"dark-purple\" | \"default\" | \"default-subtle\" | \"electric-purple\" | \"fuchsia\" | \"fuscha\" | \"lilac\" | \"navy\" | \"olive-green\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Tag background color.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "alert-yellow-green",
              "type": "string"
            },
            {
              "value": "aqua-green",
              "type": "string"
            },
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "bubblegum-pink",
              "type": "string"
            },
            {
              "value": "dark-purple",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "default-subtle",
              "type": "string"
            },
            {
              "value": "electric-purple",
              "type": "string"
            },
            {
              "value": "fuchsia",
              "type": "string"
            },
            {
              "value": "fuscha",
              "type": "string"
            },
            {
              "value": "lilac",
              "type": "string"
            },
            {
              "value": "navy",
              "type": "string"
            },
            {
              "value": "olive-green",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Tag is removable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "removable",
          "type": "boolean",
          "mutable": false,
          "attr": "removable",
          "reflectToAttr": false,
          "docs": "Tag is removable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Index for remove tag",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "guxdelete",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when click on remove button",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-tooltip-title", "gux-icon"],
      "dependencyGraph": {
        "gux-tag-beta": ["gux-tooltip-title", "gux-icon"],
        "gux-tooltip-title": ["gux-tooltip"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-text-highlight/gux-text-highlight.tsx",
      "encapsulation": "none",
      "tag": "gux-text-highlight",
      "readme": "# gux-text-highlight\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "highlight",
          "type": "string",
          "mutable": false,
          "attr": "highlight",
          "reflectToAttr": false,
          "docs": "The text to highlight.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "strategy",
          "type": "\"contains\" | \"fuzzy\" | \"start\"",
          "mutable": false,
          "attr": "strategy",
          "reflectToAttr": false,
          "docs": "The way the text should be highlighted.",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "contains",
              "type": "string"
            },
            {
              "value": "fuzzy",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The value to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-command-palette-legacy", "gux-list-item-legacy"],
      "dependencies": [],
      "dependencyGraph": {
        "gux-command-palette-legacy": ["gux-text-highlight"],
        "gux-list-item-legacy": ["gux-text-highlight"]
      }
    },
    {
      "filePath": "./src/components/legacy/gux-text-label-legacy/gux-text-label.tsx",
      "encapsulation": "none",
      "tag": "gux-text-label-legacy",
      "readme": "# gux-text-label-legacy\n\nA styled label element typically used in conjunction with input controls.  The label allows take either a string label or a set of dom elements as a label slot.\n",
      "docs": "A styled label element typically used in conjunction with input controls.  The label allows take either a string label or a set of dom elements as a label slot.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The string of text to use for the label.  If the 'label' slot is\nprovided, that dom will be used instead of this property.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"above\" | \"beside\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "The position of the label relative to its contained element.",
          "docsTags": [],
          "default": "'above'",
          "values": [
            {
              "value": "above",
              "type": "string"
            },
            {
              "value": "beside",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-time/gux-time.tsx",
      "encapsulation": "shadow",
      "tag": "gux-time-beta",
      "readme": "# gux-time-beta\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "datetime",
          "type": "string",
          "mutable": false,
          "attr": "datetime",
          "reflectToAttr": false,
          "docs": "The ISO string representation of the time to format",
          "docsTags": [],
          "default": "new Date().toISOString()",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "\"full\" | \"long\" | \"medium\" | \"short\"",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Format option type",
          "docsTags": [],
          "default": "'short'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/beta/gux-time-picker/gux-time-picker.tsx",
      "encapsulation": "shadow",
      "tag": "gux-time-picker-beta",
      "readme": "# gux-time-picker-beta\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "clockType",
          "type": "\"12h\" | \"24h\"",
          "mutable": true,
          "attr": "clock-type",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "12h",
              "type": "string"
            },
            {
              "value": "24h",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasError",
          "type": "boolean",
          "mutable": false,
          "attr": "has-error",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interval",
          "type": "15 | 30 | 60",
          "mutable": false,
          "attr": "interval",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "60",
          "values": [
            {
              "value": "15",
              "type": "number"
            },
            {
              "value": "30",
              "type": "number"
            },
            {
              "value": "60",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "`${string}:${string}`",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'00:00'",
          "values": [
            {
              "type": "`${string}:${string}`"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "focus",
          "capture": false,
          "passive": false
        },
        {
          "event": "blur",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-icon", "gux-list-item", "gux-list", "gux-popup"],
      "dependencyGraph": {
        "gux-time-picker-beta": [
          "gux-icon",
          "gux-list-item",
          "gux-list",
          "gux-popup"
        ]
      }
    },
    {
      "filePath": "./src/components/stable/gux-toggle/gux-toggle.tsx",
      "encapsulation": "shadow",
      "tag": "gux-toggle",
      "readme": "# gux-toggle\n\nThis is a basic toggle using a html checkbox component in it.\nIf the checkedLabel and uncheckedLabel are specified, label apears on the right of the component.\nYou can use keyboard to change the state of the component.\nSpace key and enter key are binded.\nThis component supports dark theme mode also.\nA check event is triggered when the state of the component changed.\n",
      "docs": "This is a basic toggle using a html checkbox component in it.\nIf the checkedLabel and uncheckedLabel are specified, label apears on the right of the component.\nYou can use keyboard to change the state of the component.\nSpace key and enter key are binded.\nThis component supports dark theme mode also.\nA check event is triggered when the state of the component changed.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checkedLabel",
          "type": "string",
          "mutable": false,
          "attr": "checked-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayInline",
          "type": "boolean",
          "mutable": false,
          "attr": "display-inline",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "mutable": false,
          "attr": "error-message",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelPosition",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "uncheckedLabel",
          "type": "string",
          "mutable": false,
          "attr": "unchecked-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "check",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "gux-radial-loading",
        "gux-error-message-beta",
        "gux-toggle-slider"
      ],
      "dependencyGraph": {
        "gux-toggle": [
          "gux-radial-loading",
          "gux-error-message-beta",
          "gux-toggle-slider"
        ],
        "gux-error-message-beta": ["gux-icon"],
        "gux-toggle-slider": ["gux-icon"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-toggle/gux-toggle-slider/gux-toggle-slider.tsx",
      "encapsulation": "none",
      "tag": "gux-toggle-slider",
      "readme": "# gux-toggle-slider\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorId",
          "type": "string",
          "mutable": false,
          "attr": "error-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "guxAriaLabel",
          "type": "string",
          "mutable": false,
          "attr": "gux-aria-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelId",
          "type": "string",
          "mutable": false,
          "attr": "label-id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": ["gux-toggle"],
      "dependencies": ["gux-icon"],
      "dependencyGraph": {
        "gux-toggle-slider": ["gux-icon"],
        "gux-toggle": ["gux-toggle-slider"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-tooltip/gux-tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "gux-tooltip",
      "readme": "# gux-tooltip\n\nThis custom component is a simple tooltip.\n\nWhen hovering a node, the tooltip will be shown below.\n\nIf there is not enough space on the bottom, or right of the component, the tooltip position will be adjusted.\n\n## Example usage\n\n``` html\n<!-- First option (With parentElement) -->\n<div>\n  <button>Button</button>\n  <gux-tooltip>My great tooltip</gux-tooltip>\n</div>\n\n<!-- Second option (With parent id in for attribute) -->\n<button id=\"needs-tooltip\">Button</button>\n<gux-tooltip for=\"needs-tooltip\">My great tooltip</gux-tooltip>\n```\n",
      "docs": "This custom component is a simple tooltip.\n\nWhen hovering a node, the tooltip will be shown below.\n\nIf there is not enough space on the bottom, or right of the component, the tooltip position will be adjusted.",
      "docsTags": [
        {
          "name": "slot",
          "text": "- Content of the tooltip"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "for",
          "type": "string",
          "mutable": false,
          "attr": "for",
          "reflectToAttr": false,
          "docs": "Indicates the id of the element the popover should anchor to. (If not supplied the parent element is used)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": true,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Placement of the tooltip. Default is bottom-start",
          "docsTags": [],
          "default": "'bottom-start'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hideTooltip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hideTooltip() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "showTooltip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "showTooltip() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "Content of the tooltip"
        }
      ],
      "parts": [],
      "dependents": [
        "gux-copy-to-clipboard-beta",
        "gux-tooltip-title",
        "gux-truncate-beta"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gux-copy-to-clipboard-beta": ["gux-tooltip"],
        "gux-tooltip-title": ["gux-tooltip"],
        "gux-truncate-beta": ["gux-tooltip"]
      }
    },
    {
      "filePath": "./src/components/stable/gux-tooltip-title/gux-tooltip-title.tsx",
      "encapsulation": "none",
      "tag": "gux-tooltip-title",
      "readme": "# gux-title-tooltip\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "setHideTooltip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setHideTooltip() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setShowTooltip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setShowTooltip() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "mouseenter",
          "capture": false,
          "passive": true
        },
        {
          "event": "mouseleave",
          "capture": false,
          "passive": true
        },
        {
          "event": "mousedown",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gux-badge-beta",
        "gux-inline-alert-beta",
        "gux-tab",
        "gux-tab-advanced",
        "gux-tag-beta"
      ],
      "dependencies": ["gux-tooltip"],
      "dependencyGraph": {
        "gux-tooltip-title": ["gux-tooltip"],
        "gux-badge-beta": ["gux-tooltip-title"],
        "gux-inline-alert-beta": ["gux-tooltip-title"],
        "gux-tab": ["gux-tooltip-title"],
        "gux-tab-advanced": ["gux-tooltip-title"],
        "gux-tag-beta": ["gux-tooltip-title"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-truncate/gux-truncate.tsx",
      "encapsulation": "none",
      "tag": "gux-truncate-beta",
      "readme": "# gux-truncate\n\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "- text node or element containing text to truncate"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "maxLines",
          "type": "number",
          "mutable": false,
          "attr": "max-lines",
          "reflectToAttr": false,
          "docs": "Lines to wrap before truncating",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setHideTooltip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setHideTooltip() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setShowTooltip",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setShowTooltip() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "",
          "docs": "text node or element containing text to truncate"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": ["gux-tooltip"],
      "dependencyGraph": {
        "gux-truncate-beta": ["gux-tooltip"]
      }
    },
    {
      "filePath": "./src/components/beta/gux-visualization/gux-visualization.tsx",
      "encapsulation": "shadow",
      "tag": "gux-visualization-beta",
      "readme": "# gux-visualization-beta\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "embedOptions",
          "type": "EmbedOptions<string, Renderers>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "EmbedOptions<string, Renderers>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visualizationSpec",
          "type": "GenericConcatSpec<NonNormalizedSpec> & TopLevelProperties<ExprRef | SignalRef> & { $schema?: string; config?: Config<ExprRef | SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } | GenericFacetSpec<UnitSpecWithFrame<Field>, LayerSpec<Field>, Field> & TopLevelProperties<ExprRef | SignalRef> & { $schema?: string; config?: Config<ExprRef | SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } & DataMixins | GenericHConcatSpec<NonNormalizedSpec> & TopLevelProperties<ExprRef | SignalRef> & { $schema?: string; config?: Config<ExprRef | SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } | GenericUnitSpec<FacetedCompositeEncoding<Field>, AnyMark, TopLevelParameter> & ResolveMixins & GenericCompositionLayout & FrameMixins<ExprRef | SignalRef> & TopLevelProperties<ExprRef | SignalRef> & { $schema?: string; config?: Config<ExprRef | SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } & DataMixins | GenericVConcatSpec<NonNormalizedSpec> & TopLevelProperties<ExprRef | SignalRef> & { $schema?: string; config?: Config<ExprRef | SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } | LayerRepeatSpec & TopLevelProperties<ExprRef | SignalRef> & { $schema?: string; config?: Config<ExprRef | SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } | LayerSpec<Field> & TopLevelProperties<ExprRef | SignalRef> & { $schema?: string; config?: Config<ExprRef | SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } | NonLayerRepeatSpec & TopLevelProperties<ExprRef | SignalRef> & { $schema?: string; config?: Config<ExprRef | SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } | Spec",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "GenericConcatSpec<NonNormalizedSpec> & TopLevelProperties<ExprRef"
            },
            {
              "type": "SignalRef> & { $schema?: string; config?: Config<ExprRef"
            },
            {
              "type": "SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; }"
            },
            {
              "type": "GenericFacetSpec<UnitSpecWithFrame<Field>, LayerSpec<Field>, Field> & TopLevelProperties<ExprRef"
            },
            {
              "type": "SignalRef> & { $schema?: string; config?: Config<ExprRef"
            },
            {
              "type": "SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } & DataMixins"
            },
            {
              "type": "GenericHConcatSpec<NonNormalizedSpec> & TopLevelProperties<ExprRef"
            },
            {
              "type": "SignalRef> & { $schema?: string; config?: Config<ExprRef"
            },
            {
              "type": "SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; }"
            },
            {
              "type": "GenericUnitSpec<FacetedCompositeEncoding<Field>, AnyMark, TopLevelParameter> & ResolveMixins & GenericCompositionLayout & FrameMixins<ExprRef"
            },
            {
              "type": "SignalRef> & TopLevelProperties<ExprRef"
            },
            {
              "type": "SignalRef> & { $schema?: string; config?: Config<ExprRef"
            },
            {
              "type": "SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; } & DataMixins"
            },
            {
              "type": "GenericVConcatSpec<NonNormalizedSpec> & TopLevelProperties<ExprRef"
            },
            {
              "type": "SignalRef> & { $schema?: string; config?: Config<ExprRef"
            },
            {
              "type": "SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; }"
            },
            {
              "type": "LayerRepeatSpec & TopLevelProperties<ExprRef"
            },
            {
              "type": "SignalRef> & { $schema?: string; config?: Config<ExprRef"
            },
            {
              "type": "SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; }"
            },
            {
              "type": "LayerSpec<Field> & TopLevelProperties<ExprRef"
            },
            {
              "type": "SignalRef> & { $schema?: string; config?: Config<ExprRef"
            },
            {
              "type": "SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; }"
            },
            {
              "type": "NonLayerRepeatSpec & TopLevelProperties<ExprRef"
            },
            {
              "type": "SignalRef> & { $schema?: string; config?: Config<ExprRef"
            },
            {
              "type": "SignalRef>; datasets?: Datasets; usermeta?: Dict<unknown>; }"
            },
            {
              "type": "Spec"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "chartClicked",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "chartComponentReady",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "gux-chart-column-beta",
        "gux-chart-donut-beta",
        "gux-chart-line-beta",
        "gux-chart-pie-beta",
        "gux-chart-scatter-plot-beta"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "gux-chart-column-beta": ["gux-visualization-beta"],
        "gux-chart-donut-beta": ["gux-visualization-beta"],
        "gux-chart-line-beta": ["gux-visualization-beta"],
        "gux-chart-pie-beta": ["gux-visualization-beta"],
        "gux-chart-scatter-plot-beta": ["gux-visualization-beta"]
      }
    }
  ]
}
